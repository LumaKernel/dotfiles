[[plugins]]
repo = 'Shougo/dein.vim'
[[plugins]]
repo = 'w0ng/vim-hybrid'# {{{
hook_add = """
  set background=dark
  augroup MyAutoCmd
    au VimEnter * nested colorscheme hybrid
  augroup END
"""# }}}
[[plugins]]
repo = 'osyo-manga/vim-precious'# {{{
dapends = ['context_filetype.vim']
on_ft = ['toml']
hook_add = '''
let g:precious_enable_switch_CursorMoved = {
  \  "*" : 0,
  \  "toml" : 1,
  \}
'''# }}}
[[plugins]]
repo = 'Shougo/context_filetype.vim'# {{{
on_ft = ['toml']# }}}
[[plugins]]
repo = 'cespare/vim-toml'# {{{
on_ft = 'toml'# }}}
[[plugins]]
repo = 'itchyny/vim-parenmatch'
[[plugins]]
repo = 'itchyny/vim-cursorword'
[[plugins]]
repo = 'tyru/caw.vim'# {{{
hook_add = '''
  nmap <C-I> <Plug>(caw:hatpos:toggle)
  vmap <C-I> <Plug>(caw:hatpos:toggle)
'''# }}}
[[plugins]]
repo = 'Shougo/unite.vim'# {{{
hook_add = '''
  let g:unite_enable_start_insert = 1

  augroup MyAutoCmd
    autocmd Filetype unite imap <buffer><silent> <ESC> <ESC>q
    autocmd Filetype unite imap <buffer><silent> <C-J> <C-N>
    autocmd Filetype unite imap <buffer><silent> <C-K> <C-P>
  augroup END

  nnoremap <silent> <Leader>b :Unite buffer<CR>
  nnoremap <silent> <Leader>a :Unite outline<CR>

  " Unite-grep {{{
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1

  nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
  nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
  nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>

  " use ripgrep
  if executable('rg')
    let g:unite_source_grep_command = 'rg'
    let g:unite_source_grep_default_opts = '--vimgrep'
    let g:unite_source_grep_recursive_opt = ''
  endif
  
  " }}}
'''# }}}
[[plugins]]
repo = 'airblade/vim-gitgutter'
[[plugins]]
repo = 'scrooloose/nerdtree'# {{{
depends = ['vimproc.vim']
hook_add = '''
  let g:NERDTreeShowHidden=1 " show dotfiles
  nnoremap <silent> <Leader>s :NERDTree<CR>
  augroup MyAutoCmd
    au FileType nerdtree nmap <buffer> za o
    au FileType nerdtree nnoremap <buffer><silent> <Leader>s :q<CR>
  augroup END
'''
# }}}
[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'# {{{
depends = ['nerdtree']# }}}
[[plugins]]
repo = 'Shougo/vimshell.vim'# {{{
depends = ['vimproc.vim']
hook_add = '''
  nnoremap <silent> <Leader>h :VimShell<CR>
'''# }}}
[[plugins]]
repo = 'Shougo/neosnippet.vim'# {{{
depends = ['neosnippet-snippets']
hook_add = '''
  let g:neosnippet#snippets_directory = ['~/lib-cpp/', '~/vimfiles/snippets/']

  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_or_target)
'''# }}}
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
[[plugins]]
repo = 'Shougo/neocomplete.vim'# {{{
hook_add = '''
  " setup {{{
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
      \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ neocomplete#start_manual_complete()
  function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction"}}}
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  " Close popup by <Space>.
  "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

  " AutoComplPop like behavior.
  "let g:neocomplete#enable_auto_select = 1

  " Shell like behavior (not recommended.)
  "set completeopt+=longest
  "let g:neocomplete#enable_auto_select = 1
  "let g:neocomplete#disable_auto_complete = 1
  "inoremap <expr><TAB>  pumvisible() ? "\<Down>" :
  " \ neocomplete#start_manual_complete()

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  "let g:neocomplete#sources#omni#input_patterns.php =
  "\ '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
  "let g:neocomplete#sources#omni#input_patterns.c =
  "\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?'
  "let g:neocomplete#sources#omni#input_patterns.cpp =
  "\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  let g:neocomplete#sources#omni#input_patterns.perl =
  \ '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

  " For smart TAB completion.
  "inoremap <expr><TAB>  pumvisible() ? "\<C-n>" :
  "        \ <SID>check_back_space() ? "\<TAB>" :
  "        \ neocomplete#start_manual_complete()
  "  function! s:check_back_space() "{{{
  "    let col = col('.') - 1
  "    return !col || getline('.')[col - 1]  =~ '\s'
  "  endfunction"}}}

  "  --- }}}

  " cpp {{{
  if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
  endif
  " let g:neocomplete#force_omni_input_patterns.cpp =
          " \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
  " }}}

  " js {{{
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  " }}}

'''# }}}
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_setConceal = 0
'''
# c++ {{{
[[plugins]]
repo = 'Mizuchi/STL-Syntax'# {{{
on_ft = 'cpp'# }}}
[[plugins]]
repo = 'Shougo/unite-outline'
[[plugins]]
# {{{
repo = 'LumaKernel/ale'
# repo = 'w0rp/ale'
if = 'has("job") && has("channel") && has("timers")'
on_ft = ['cpp', 'javascript', 'python', 'cmake']
# 参考 :
# https://rcmdnk.com/blog/2017/09/25/computer-vim/
# https://qiita.com/lighttiger2505/items/e0ada17634516c081ee7#ale
hook_add = '''
  " エラー行に表示するマーク
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '>>'

  let g:ale_list_window_size = 1

  " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  let g:ale_sign_column_always = 1

  let g:ale_lint_on_enter = 1
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 'always'
  let g:ale_lint_on_filetype_changed = 1
  let g:ale_lint_on_insert_leave = 1

  let g:ale_set_loclist = 1
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0

  " TODO : 言語ごとに設定する dein ファイルを分ける

  " --- C++ ---
  let g:ale_linters = {
    \  'cpp': ['gcc'],
    \  'javascript': ['eslint'],
    \  'python' : [
    \      'flake8',
    \      'mypy',
    " \      'pylint', " PEP8 lint
    \  ],
    \  'cmake' : [
    \      'cmakelint',
    \  ],
    \}

  " --- javascirpt ---
  let g:ale_javascript_prettier_use_local_config = 1

  let g:ale_fixers = {
  \   'javascript': [
  \       'eslint',
  \   ],
  \   'cpp': [
  \       'clang-format',
  \   ],
  \   'python': [
  \       'add_blank_lines_for_python_control_statements',
  \       'autopep8',
  \   ],
  \   'cmake': [
  \       'cmakeformat',
  \   ],
  \}

  let g:ale_javascript_prettier_use_local_config = 1
  " --- ---

  nmap <silent> <Leader>p <Plug>(ale_previous_wrap)
  nmap <silent> <Leader>n <Plug>(ale_next_wrap)
  nnoremap <F8> :ALEFix<CR>

  function! s:ale_list()
    let g:ale_open_list = 1
    call ale#Queue(0, 'lint_file')
  endfunction
  command! ALEList call s:ale_list()
  nnoremap <Leader>m :ALEList<CR>
  augroup MyAutoCmd
    autocmd FileType qf nnoremap <silent> <buffer> q :let g:ale_open_list = 0<CR>:bd<CR>
    autocmd FileType help,qf,man,ref let b:ale_enabled = 0
  augroup END

  " --- python3 ---
  let g:python3_host_prog = "python"
  let g:ale_python_flake8_executable = g:python3_host_prog
  let g:ale_python_flake8_options = '-m flake8'
  let g:ale_python_autopep8_executable = g:python3_host_prog
  let g:ale_python_autopep8_options = '-m autopep8'
  let g:ale_python_isort_executable = g:python3_host_prog
  let g:ale_python_isort_options = '-m isort'
  let g:ale_python_mypy_executable = g:python3_host_prog
  let g:ale_python_mypy_options = '-m mypy –ignore-missing-imports'
  " --- ---

  " --- vim ---

  " TODO
  " let g:ale_linters["vim"] = ["vint"]

  " --- ---
'''

hook_source = '''
  call ale#Set('cpp_gcc_options', '-std=c++14 -Wall -Wextra -Wpedantic -DDEBUG -DDEBUG_OUT=std::cout')
'''# }}}
# }}}
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'# {{{
# 参考 :
# https://qiita.com/ahiruman5/items/4f3c845500c172a02935
hook_add = '''
  let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:20,results:50'
  let g:ctrlp_show_hidden = 1
  " ファイルのみ
  let g:ctrlp_types = ['fil']
  " カレントディレクトリから探す
  let g:ctrlp_working_path_mode = 'w'
  let g:ctrlp_lazy_update = 200
  let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v([\/]\.(git|hg|svn)$|node_modules)',
    \ 'file': '\v\.(exe|so|dll|o|vo|aux|glob)$',
    \ 'link': '',
    \ }
  if executable('ag')
    " CtrlPのキャッシュを使わない
    let g:ctrlp_use_caching=0
    let g:ctrlp_user_command='ag %s -i --nogroup --nocolor -g ""'
  endif
'''#}}}
[[plugins]]
repo = 'thinca/vim-quickrun'# {{{
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
  \ 'outputter' : 'quickfix',
  \ 'runner' : 'job'
  \ }

  " 'type' : 'cpp/g++' とすることで明示的に 'cpp/g++' の設定を継承する

  " -w : Inhibit all warning messages. : すべての警告を禁止する
  let g:quickrun_config.cpp = {
  \ 'type' : 'cpp/g++',
  \ 'command' : 'g++',
  \ 'cmdopt' : '-DDEBUG -DDEBUG_OUT=std::cout -w -std=c++14',
  \ }
  let g:quickrun_config['cpp-no-debug'] = {
  \ 'type' : 'cpp/g++',
  \ 'command' : 'g++',
  \ 'cmdopt' : '-DNDEBUG -w -std=c++14',
  \ }
  if has('win32') || has('win64')
    let g:quickrun_config['python'] = {
    \   "hook/output_encode/enable" : 1,
    \   "hook/output_encode/encoding" : "cp932",
    \}
  endif

  nnoremap <expr> <Leader>0 ":ccl\|QuickRun\<CR>"
  augroup MyAutoCmd
    autocmd FileType cpp nnoremap <buffer><expr> <Leader>l ':ccl\|QuickRun -type "cpp-no-debug"' . "\<CR>"
  augroup END
'''# }}}
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
[[plugins]]
repo = 'majutsushi/tagbar'# {{{
hook_add = '''
  let g:tagbar_width = 30
  let g:tagbar_autoshowtag = 1
'''# }}}
[[plugins]]
repo = 'elzr/vim-json'# {{{
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''# }}}
[[plugins]]
repo = 'ap/vim-buftabline'# {{{
hook_add = '''
  let g:buftabline_show = 1
  let g:buftabline_indicators = 1
'''# }}}
[[plugins]]
repo = 'rhysd/wandbox-vim'
[[plugins]]
repo = 'Shougo/vimproc.vim'# {{{
build = 'make'# }}}
[[plugins]]
repo = 'pangloss/vim-javascript'# {{{
on_ft = ['javascript']# }}}
[[plugins]]
repo = 'digitaltoad/vim-pug'# {{{
on_ft = ['pug', 'jade']# }}}
[[plugins]]
repo = 'heavenshell/vim-jsdoc'# {{{
hook_add = '''
  let g:jsdoc_enable_es6 = 1
  au FileType javascript nnoremap <buffer> <Leader>d :JsDoc
'''# }}}
[[plugins]]
repo = 'tpope/vim-fugitive'
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:my_rainbow_languages = ["python"]

  let g:rainbow_active = 0
  let g:rainbow_conf = {
    \   'separately': {
    \       '*' : {},
    \       'toml' : 0,
    \       'css' : 0,
    \   }
    \ }

  nnoremap <silent> <Leader>z :RainbowToggle<CR>
  
  augroup MyAutoCmd
    " すぐに登録するとうまくいかない
    autocmd VimEnter * autocmd MyAutoCmd FileType * RainbowToggleOff
    for lang in g:my_rainbow_languages
      exec "autocmd VimEnter * autocmd MyAutoCmd FileType " .
            \ lang . " " .
            \ "RainbowToggleOn"
    endfor
  augroup END
'''
[[plugins]]
repo = 'gootorov/q-sharp.vim'

# syntax highlight
# [[plugins]]
# repo = 'tounaishouta/coq.vim'

# [[plugins]]
# repo = 'vim-scripts/CoqIDE'

# [[plugins]]
# repo = 'https://framagit.org/manu/coq-au-vim'
# on_ft = 'coq'

# [[plugins]]
# repo = "let-def/vimbufsync"
# on_ft = "coq"

[[plugins]]
repo = "LumaKernel/coquille"
on_ft = "coq"
hook_source = """
  let g:coquille_auto_move=1

  function! MyCoqMaps()
    nnoremap <silent> <C-C> :CoqLaunch<CR>
    nnoremap <silent> <Leader>j :CoqNext<CR>
    nnoremap <silent> <Leader>k :CoqBack<CR>
    nnoremap <silent> <Leader>l :CoqToCursor<CR>
    nnoremap <silent> <Leader>g :CoqToLast<CR>
    nnoremap <silent> <Leader>t :MoveToTop<CR>

    nnoremap <Leader>compute :CoqQuery Compute .<Left>
    nnoremap <Leader>print :CoqQuery Print .<Left>
    nnoremap <Leader>check :CoqQuery Check .<Left>
  endfunction

  augroup my_coq
    au!
    au FileType coq :call MyCoqMaps()
  augroup END

  function! s:setup_my_coq_colo()
    if !has('gui')
      if g:colors_name ==? 'hybrid'
        hi CoqChecked      ctermbg=17
        hi CoqCheckedAxiom ctermbg=58
        hi CoqQueued       ctermbg=22
        hi CoqMarkedWarn   ctermbg=64
        hi CoqCheckedWarn  ctermbg=64
        hi CoqMarkedError  ctermbg=160
        hi CoqCheckedError ctermbg=160
      endif
    endif
  endfunction

  augroup my_coq_colo
    au!
    autocmd ColorScheme * :call <SID>setup_my_coq_colo()
  augroup END

"""

# Vim Script Debug


[[plugins]]
repo = 'vim-jp/vital.vim'
merged = 0

[[plugins]]
repo = 'haya14busa/vital-vimlcompiler'
depends = ["vital.vim"]

[[plugins]]
repo = 'haya14busa/vital-power-assert'
depends = ["vital.vim"]
hook_add = """
  let g:__vital_power_assert_config = {
  \   '__debug__': 1
  \ }
"""

[[plugins]]
repo = 'haya14busa/vital-safe-string'
depends = ["vital.vim"]

[[plugins]]
repo = 'guns/xterm-color-table.vim'


[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = """
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
"""

[[plugins]]
repo = 'PProvost/vim-ps1'
  

