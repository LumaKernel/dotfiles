snippet     query
alias       jquery
alias       selector
alias       document
options     head
  const $: typeof document.querySelectorAll = document.querySelectorAll.bind(document)
  const \$1: typeof document.querySelector = document.querySelector.bind(document)
  $0


snippet     esm-this-dir
alias       dirname-esm
options     head
  import {join, dirname} from 'path'
  import {fileURLToPath} from 'url'
  join(dirname(fileURLToPath(import.meta.url), "foo");


snippet     assertNonEmpty
alias       nonempty
options     head
  function assertNonEmpty<T>(value: T | null | undefined): asserts value is T {
    if (value === null || value === void 0) {
      throw new Error("Logic Error");
    }
  }

snippet     assertIsHTMLTemplateElement
alias       ishtmltemplateelement
alias       htmltemplateelement
alias       templateelement
alias       elementtemplate
options     head
  function assertIsHTMLTemplateElement (value: Element | null | undefined): asserts value is HTMLTemplateElement {
    if (value === null || value === void 0 || !(value instanceof HTMLTemplateElement)) {
      throw new Error("Logic Error");
    }
  }

snippet     assertIsHTMLElement
alias       ishtmlelement
alias       htmlelement
options     head
  function assertIsHTMLElement(
    value: Element | null | undefined
  ): asserts value is HTMLElement {
    if (
      value === null ||
      value === void 0 ||
      !(value instanceof HTMLElement)
    ) {
      throw new Error("Logic Error");
    }
  }

snippet     assertIsSVGElement
alias       issvgelement
alias       svgelement
options     head
  function assertIsSVGElement(
    value: Element | null | undefined
  ): asserts value is SVGElement {
    if (value === null || value === void 0 || !(value instanceof SVGElement)) {
      throw new Error("Logic Error");
    }
  }

snippet processenv
alias env_values
alias nodejs_env_values
  declare namespace NodeJS {
    interface ProcessEnv {
      readonly NODE_ENV?: 'development' | 'production' | 'test'
    }
  }

snippet node_debug
alias debug_node
alias file_debug
  import * as fs from "fs";
  import * as util from "util";
  import * as path from "path";
  import { homedir } from "os";

  const debugLogFile = path.resolve(homedir(), "node-debug.log");

  export const dump = (obj: unknown) => {
    fs.appendFileSync(
      debugLogFile,
      \`${new Date().toLocaleTimeString()}: ${util.inspect(obj)}\n\`,
    );
  };

snippet     import_meta
alias       declare_import_meta
alias       meta_import_declare
alias       env_meta_import_declare
alias       env_meta_import_declare
options     head
  declare interface ImportMeta {
    env: {
      GITHUB_AUTH_TOKEN: string;
      NODE_ENV: 'development' | 'production';
      PORT?: string;
      PWD: string;
    };
  }

snippet     import_meta_vite
alias       vite_import_meta
alias       declare_import_meta_vite
alias       meta_import_declare_vite
alias       env_meta_import_declare_vite
alias       env_meta_import_declare_vite
options     head
  declare interface ImportMeta {
    env: {
      MODE: string;
      BASE_URL: string;
      PROD: boolean;
      DEV: boolean;
    };
  }

snippet dts_react_patch
  declare namespace JSX {
    interface IntrinsicElements {
      rb: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
    }
  }

# Deno snippets
snippet deno_import_io
  import * as io from "https://deno.land/std/io/mod.ts";

snippet deno_import_semver
  import * as semver from "https://deno.land/x/semver/mod.ts";

snippet deno_import_semaphore
  import { Mutex } from "https://deno.land/x/semaphore/mod.ts";

snippet deno_import_path
  import * as path from "https://deno.land/std/path/mod.ts";

snippet deno_import_fs
  import * as fs from "https://deno.land/std/fs/mod.ts";

snippet deno_import_unzip
  import { unZipFromFile } from "https://deno.land/x/zip/mod.ts";

snippet deno_import_assert
  import { assert } from "https://deno.land/std/testing/asserts.ts";

snippet deno_import_xdg
  import xdg from 'https://deno.land/x/xdg/src/mod.deno.ts';

snippet deno_import_iter_helpers
  import {
    asyncIteratorFrom as fromA,
    iteratorFrom as from,
    wrapAsyncIterator as wrapA,
    wrapIterator as wrap,
  } from "https://deno.land/x/iterator_helpers/mod.ts";

snippet deno_ignore_explicit_any
alias any_ignore_deno
alias ignore_any_deno
alias explicit_any_ignore_deno
  // deno-lint-ignore no-explicit-any

snippet deno_exists
alias fs_exists_deno
alias exists_deno
  // https://github.com/denoland/deno_std/issues/1216
  const exists = async (filePath: string): Promise<boolean> => {
    try {
      await Deno.lstat(filePath);
      return true;
    } catch (_e: unknown) {
      return false;
    }
  };


snippet esbuild-omit-import-node-ns
options head
  /** @type {import('esbuild').Plugin} */
  const omitImportNodeNSPlugin = {
    name: 'omit-import-node-ns',
    setup(build) {
      build.onResolve({filter: /^node:/}, (args) => {
        return {
          path: args.path.slice(5),
          external: true,
        };
      });
    },
  };
