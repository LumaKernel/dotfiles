[binary_search]
prefix = ['binary_search']
body = """
let ans = {
  type Idx = i64;
  let mut ok: Idx = ${1:N as Idx};
  let mut ng: Idx = ${2:-1};
  while (ok - ng).abs() > 1 {
    let v = (ok + ng) / 2;
    let is_ok: bool = {
      // v = v as usize;
      $0
    };
    if is_ok {
      ok = v;
    } else {
      ng = v;
    }
  }
  ok
};
"""

[rand]
prefix = ['rand_pcg64_atcoder']
body = """
use rand::Rng;
use rand_core::SeedableRng;
use rand_pcg::Pcg64Mcg;
let mut rng = Pcg64Mcg::from_rng(&mut rand::thread_rng()).unwrap();
// let mut rng = Pcg64Mcg::seed_from_u64(0);
"""
