include cp-cpp/*

snippet     p
options     word
  cout << ${0:TARGET} << endl;

snippet     emp options     word
  emplace_back

snippet     pb
options     word
  push_back

snippet     s
options     word
  std::

snippet     all
options     word
  (${1}).begin(), ($1).end()

snippet     input
alias       iterator
options     word
  template<class InputIter, class = typename iterator_traits<InputIter>::value_type>

snippet     lib
options     head
  // @import header
  #include <bits/stdc++.h>
  using namespace std;
  using ll = long long;
  
  // @@
  // @ ${1}
  // @snippet ${2}
  ${0}

snippet     random
options     head
  random_device rnd;
  mt19937 mt(rnd());
  uniform_int_distribution<ull> rd(0, ull(-1));

snippet     random_discard
options     head
  discard_block_engine<mt19937, 100, 97> dis(rnd());

snippet     bigfloat_boost
alias       boost_bigfloat
options     head
  #include <boost/multiprecision/cpp_dec_float.hpp>
  namespace mp = boost::multiprecision;
  using float100 = mp::cpp_dec_float_100;
  // using float1000 = mp::number< mp::cpp_dec_float< 1000 > >;
  // using float1000ex = mp::number< mp::cpp_dec_float< 1000, std::uint64_t > >;

snippet     time_test
options     head
  // TIME test {{{
  #define TIME(label, T, procedure) {\
    std::cout << #label << " : ";\
    clock_t beg = clock();\
    for(int i = 0; i < T; i++) procedure;\
    clock_t las = clock();\
    std::cout << double(las - beg) / CLOCKS_PER_SEC << "s" << std::endl;\
    }
  // }}}

snippet dump
options head
  // #undef DEBUG
  // #define DEBUG
  // DEBUG {{{
  #include <array>
  #include <deque>
  #include <iostream>
  #include <list>
  #include <queue>
  #include <stack>
  #include <tuple>
  #include <valarray>
  #include <vector>
  template < int n, class... T >
  typename std::enable_if< (n >= sizeof...(T)) >::type __output_tuple(
    std::ostream &, std::tuple< T... > const &) {}
  template < int n, class... T >
  typename std::enable_if< (n < sizeof...(T)) >::type __output_tuple(
    std::ostream &os, std::tuple< T... > const &t) {
    os << (n == 0 ? "" : ", ") << std::get< n >(t);
    __output_tuple< n + 1 >(os, t);
  }
  template < class... T >
  std::ostream &operator<<(std::ostream &os, std::tuple< T... > const &t) {
    os << "(";
    __output_tuple< 0 >(os, t);
    os << ")";
    return os;
  }
  template < class T, class U >
  std::ostream &operator<<(std::ostream &os, std::pair< T, U > const &p) {
    os << "(" << p.first << ", " << p.second << ")";
    return os;
  }
  template < class T >
  std::ostream &operator<<(std::ostream &os, const std::stack< T > &a) {
    os << "{";
    for(auto tmp = a; tmp.size(); tmp.pop())
      os << (a.size() == tmp.size() ? "" : ", ") << tmp.top();
    os << "}";
    return os;
  }
  template < class T, class Container, class Compare >
  std::ostream &operator<<(std::ostream &os,
                           std::priority_queue< T, Container, Compare > a) {
    os << "{ (top) ";
    while(a.size()) os << a.top() << (a.size() == 1 ? "" : ", "), a.pop();
    os << " }";
    return os;
  }
  template < class T, class Container >
  std::ostream &operator<<(std::ostream &os, std::queue< T, Container > a) {
    os << "{ ";
    while(a.size()) os << a.front() << (a.size() == 1 ? "" : ", "), a.pop();
    os << " }";
    return os;
  }
  #ifdef DEBUG
  #if !defined(DEBUG_OUT)
  #define DEBUG_OUT std::cerr
  #endif
  #define dump(...)                                                                \
  [&]() {                                                                        \
    auto __debug_tap = std::make_tuple(__VA_ARGS__);                             \
    DEBUG_OUT << "[" << __LINE__ << "] " << #__VA_ARGS__ << " = " << __debug_tap \
      << std::endl;                                                      \
  }()
  template < class T >
  inline void dump2D(T &d, size_t sizey, size_t sizex) {
    for(size_t i = 0; i < sizey; i++) {
      DEBUG_OUT << "\t";
      for(size_t j = 0; j < sizex; j++)
        DEBUG_OUT << d[i][j] << (j + 1 == sizex ? "" : "\t");
      DEBUG_OUT << std::endl;
    }
  }
  template < class T >
  inline void dump1D(T &d, size_t sizey) {
    for(size_t i = 0; i < sizey; i++) {
      DEBUG_OUT << d[i] << (i + 1 == sizey ? "" : " ");
    }
    DEBUG_OUT << std::endl;
  }
  template <
  class T, class = typename std::iterator_traits< decltype(begin(T())) >::value_type,
  class = typename std::enable_if< !std::is_same< T, std::string >::value >::type >
  std::ostream &operator<<(std::ostream &os, const T &a) {
    os << "{";
    for(auto ite = begin(a); ite != end(a); ++ite)
      os << (ite == begin(a) ? "" : ", ") << *ite;
    os << "}";
    return os;
  }
  #else
  #define dump(...) ((void) 42)
  #define dump2D(...) ((void) 42)
  #define dump1D(...) ((void) 42)
  template <
  class T, class = typename std::iterator_traits< decltype(begin(T())) >::value_type,
  class = typename std::enable_if< !std::is_same< T, std::string >::value >::type >
  std::ostream &operator<<(std::ostream &os, const T &a) {
    for(auto ite = begin(a); ite != end(a); ++ite)
      os << (ite == begin(a) ? "" : " ") << *ite;
    return os;
  }
  #endif
  // }}}
