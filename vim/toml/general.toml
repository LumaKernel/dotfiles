# プラグイン追加時のあれこれ
# 
# - ファイルタイプ専用のものであれば，専用TOMLファイルに追加
# - Lazy にする場合 (on_ft なども含まれる) は，
#   dein#check_lazy_plugins() でチェック
#   この設定は，基本いらないとすら思っていい


[[tplugins]]
repo = 'Shougo/dein.vim'


[[plugins]]
repo = 'vim-jp/vimdoc-ja'


[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = """

  function s:repeat(str, num)
    return join(map(range(a:num), 'a:str'), '')
  endfunction

  function! g:MappingDescriptions()
    let s:S = vital#vital#import('Data.String')
    let left_width = max(map(deepcopy(g:mapping_descriptions), 'strlen(v:val[0])')) + 4
    let width = max(map(deepcopy(g:mapping_descriptions), 'l:left_width + strlen(v:val[1])'))
    let strs = map(deepcopy(g:mapping_descriptions), '"|  " .. s:S.pad_right(s:S.pad_right(v:val[0], l:left_width) .. v:val[1], l:width) .. "  |"')

    return [
      \   '+' .. s:repeat('-', 2 + width + 2) .. '+',
      \ ] + strs + [
      \   '+' .. s:repeat('-', 2 + width + 2) .. '+',
      \ ]
  endfunction

  let g:my_startify_message = [
        \   "\uf120  Welcome to \ue7c5",
        \   "",
        \   "Sessions.vim をプロジェクトフォルダ内に置くことでセッションを保存",
        \   "もしくは :SSave を使う",
        \   "",
        \ ]

  let g:startify_enable_special = 0
  let g:startify_session_dir = '~/.tmp/vim/startify-session'

  let g:startify_custom_header = 'startify#pad(g:my_startify_message + g:MappingDescriptions())'

  " .git とか (VCS) が見つかるまで上に登って change directory する
  let g:startify_change_to_dir = 1
  let g:startify_change_to_vcs_root = 1


  " 最新の状態にする
  let g:startify_update_oldfiles = 0

  let g:startify_session_persistence = 1

  let g:startify_bookmarks = [
        \   '~/cp',
        \   '~/mystudy',
        \   '~/work',
        \   '~/dotfiles',
        \   '~/.cache/dein/repos',
        \]

  function! s:MyColorSelections()
    return [
          \   { 'line': 'tender' , 'cmd': 'colo tender' },
          \   { 'line': 'darkblue' , 'cmd': 'colo darkblue' },
          \ ]
  endfunction


  let g:startify_commands = [
      \   ':DeinClean',
      \   ':call dein#recache_runtimepath()',
      \   ':CocConfig',
      \ ]

  let g:startify_lists = [
        \ { 'type': 'bookmarks', 'header': ['   \uf461 ブックマーク'] },
        \ { 'type': 'files',     'header': ['   \uf490 最近開いたファイル'] },
        \ { 'type': 'dir',       'header': ['   \uf490 最近開いたファイル in ' .. getcwd()] },
        \ { 'type': 'sessions',  'header': ['   \ue706 セッション'] },
        \ { 'type': 'commands',  'header': ['   \uf489 コマンド'] },
        \ { 'type': function('s:MyColorSelections'),  'header': ['   \u26a1 カラーテーマ'] },
        \ ]

"""

hook_post_source = """
  augroup MyStartifyConfig
    au User StartifyReady silent! nunmap <buffer> q
    au User StartifyReady silent! nunmap <buffer> t
    au User StartifyReady silent! nunmap <buffer> T
  augroup END
"""



[[plugins]]
repo = 'jacoborus/tender.vim'
if = '!g:from_pwsh'
hook_post_source = """
  colorscheme tender
"""


[[plugins]]
repo = 'itchyny/vim-parenmatch'


[[plugins]]
repo = 'itchyny/vim-cursorword'
if = '!g:from_pwsh'


[[plugins]]
repo = 'tyru/caw.vim'



[[plugins]]
# TODO : denite.vim に乗り換える ?
repo = 'Shougo/unite.vim' # {{{
hook_add = '''
  let g:unite_enable_start_insert = 1
  augroup MyUnite
    au!
    autocmd Filetype unite imap <buffer><silent> <ESC> <ESC>q
    autocmd Filetype unite imap <buffer><silent> <C-J> <C-N>
    autocmd Filetype unite imap <buffer><silent> <C-K> <C-P>
  augroup END

  nnoremap <silent> <Leader>b :Unite buffer<CR>
  nnoremap <unique><silent> <Leader>a :Unite outline<CR>

  " unite grep
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1

  nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
  " TODO うまくうごかない
  " nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
  nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>

  " use ripgrep
  if executable('rg')
    let g:unite_source_grep_command = 'rg'
    let g:unite_source_grep_default_opts = '--vimgrep'
    let g:unite_source_grep_recursive_opt = ''
  endif
''' # }}}


[[plugins]]
repo = 'airblade/vim-gitgutter'


# NERDTree
[[plugins]]
repo = 'scrooloose/nerdtree'
depends = ['vimproc.vim']
hook_add = '''
  let g:NERDTreeShowHidden=1
  
  " 最小限，とてもいい
  let g:NERDTreeDirArrowExpandable="\uf114"
  let g:NERDTreeDirArrowCollapsible="\uf115"
  let g:NERDTreeWinSize=24
  
  nnoremap <silent> <Leader>s :NERDTree<CR>
  augroup MyNerdTree
    au!
    au FileType nerdtree nmap <buffer> za o
  augroup END
'''

hook_post_source = '''
  " TODO
  au! NERDTree WinLeave,BufLeave
'''


[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['nerdtree']


[[plugins]]
repo = 'Shougo/vimshell.vim'
depends = ['vimproc.vim']
hook_add = '''
  nnoremap <silent> <Leader>h :VimShell<CR>
'''


[[plugins]]
repo = 'Shougo/neosnippet.vim' # {{{
depends = ['neosnippet-snippets']
hook_add = '''
  let g:neosnippet#snippets_directory = ['~/lib-cpp/', '~/dotfiles/vim/snippets/']

  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_or_target)
''' # }}}


[[plugins]]
repo = 'Shougo/neosnippet-snippets'


[[plugins]]
if = 'has("python3") && !has("nvim") && !has("win32unix")'
repo = 'roxma/nvim-yarp'


[[plugins]]
# NOTE : pip insetall --user pynvim
if = 'has("python3") && !has("nvim") && !has("win32unix")'
repo = 'roxma/vim-hug-neovim-rpc'


[[plugins]]
repo = 'Shougo/deoplete.nvim'
# if = '(has("nvim") || has("python3")) && !has("win32unix")'
if = '0'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''


[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_setConceal = 0
'''


[[plugins]]
repo = 'ctrlpvim/ctrlp.vim' # {{{
hook_add = '''
  let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:20,results:50'
  let g:ctrlp_show_hidden = 1

  " ファイルのみ
  let g:ctrlp_types = ['fil']
  " ワーキングディレクトリ として pwd から上に上がって .git
  " があるディレクトリを探す
  let g:ctrlp_working_path_mode = 'w'
  let g:ctrlp_lazy_update = 200
  let g:ctrlp_custom_ignore = {
    \   'dir':  '\v([\/]\.(git|hg|svn)$|node_modules)',
    \   'file': '\v\.(exe|so|dll|o|vo|aux|glob)$',
    \   'link': '',
    \ }
  if executable('ag')
    " CtrlPのキャッシュを使わない
    let g:ctrlp_use_caching=0
    let g:ctrlp_user_command='ag %s -i --nogroup --nocolor -g ""'
  endif
''' # }}}


[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config['_'] = {
      \   'outputter' : 'quickfix',
      \   'runner' : 'job'
      \ }
  nnoremap <expr> <Leader>0 ":ccl\|QuickRun\<CR>"
'''

[[plugins]]
repo = 'w0rp/ale' # {{{
if = '0'
hook_add = '''
  " エラー行に表示するマーク
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '>>'
  
  let g:ale_list_window_size = 1
  
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  let g:ale_sign_column_always = 1
  
  let g:ale_lint_on_enter = 1
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 'always'
  let g:ale_lint_on_filetype_changed = 1
  let g:ale_lint_on_insert_leave = 1
  
  let g:ale_set_loclist = 1
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0
  
  let g:ale_linters = get(g:, 'ale_linters', {})
  let g:ale_fixers = get(g:, 'ale_fixers', {})
  
  let g:ale_fixers['*'] = ['remove_trailing_lines', 'trim_whitespace']
  
  nmap <unique><silent> <Leader>p <Plug>(ale_previous_wrap)
  nmap <unique><silent> <Leader>n <Plug>(ale_next_wrap)
'''
# }}}



[[plugins]]
repo='prabirshrestha/async.vim'

[[plugins]]
if = '0'
repo='prabirshrestha/vim-lsp'
hook_add='''
  if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \   'name': 'clangd',
        \   'cmd': {server_info->['clangd', '-background-index']},
        \   'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
  endif

  let g:lsp_signs_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1

	let g:lsp_preview_float = 1

  let g:lsp_signs_error = {'text': '✗'}
  let g:lsp_signs_warning = {'text': '‼'}

  nnoremap 
'''

[[plugins]]
if = '0'
repo='prabirshrestha/asyncomplete.vim'

[[plugins]]
if = '0'
repo='prabirshrestha/asyncomplete-lsp.vim'


[[plugins]]
repo = 'neoclide/coc-snippets'
depends = 'coc.nvim'


[[plugins]]
if = 'has("python3")'
rev = 'release'
repo = 'neoclide/coc.nvim'
hook_add = '''
  function! s:check_back_space() abort
    let col = col('.') - 1
    return col < 1 || getline('.')[col - 1] =~# '\s'
  endfunction

  inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()

  inoremap <silent><expr> <S-TAB>
    \ pumvisible() ? "\<C-p>" :
    \ "\<S-TAB>"

  let g:coc_snippet_next = '<tab>'

  inoremap <silent><expr> <C-SPACE>
    \ coc#refresh()


  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  nmap <silent> <F8> <Plug>(coc-format)


  function! CocNvimHiDef()
    hi CocUnderline    cterm=underline gui=underline
    hi CocErrorSign    ctermfg=Red     guifg=#ff0000
    hi CocWarningSign  ctermfg=Brown   guifg=#ff922b
    hi CocInfoSign     ctermfg=Yellow  guifg=#fab005
    hi CocHintSign     ctermfg=Blue    guifg=#15aabf
    hi CocSelectedText ctermfg=Red     guifg=#fb4934
    hi CocCodeLens     ctermfg=Gray    guifg=#999999
    hi link cocerrorfloat       CocFloating
    hi link cocwarningfloat     CocFloating
    hi link cocinfofloat        CocFloating
    hi link cochintfloat        CocFloating
    hi link CocErrorHighlight   Error
    hi link CocWarningHighlight Warning
    hi link CocInfoHighlight    CocUnderline
    hi link CocHintHighlight    CocUnderline
    hi link CocListMode ModeMsg
    hi link CocListPath Comment
    hi link CocHighlightText  CursorColumn

    if has('nvim')
      hi link CocFloating NormalFloat
    else
      hi link CocFloating Pmenu
    endif

    hi link CocHoverRange     Search
    hi link CocCursorRange    Search
    hi link CocHighlightRead  CocHighlightText
    hi link CocHighlightWrite CocHighlightText
  endfunction
  augroup my_coc_nvim_hi
    autocmd Syntax * :call CocNvimHiDef()
  augroup END
  call CocNvimHiDef()
'''


[[plugins]]
if = '0'
repo = 'Shougo/deoplete.nvim'


[[plugins]]
repo = 'unblevable/quick-scope'


[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
hook_add='''
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
'''
hook_source='''
  " call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
  "    \ 'name': 'neosnippet',
  "    \ 'whitelist': ['*'],
  "    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
  "    \ }))
'''


[[plugins]]
repo = 'AndrewRadev/linediff.vim'


[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  let g:tagbar_width = 60
  let g:tagbar_autoshowtag = 1
'''


[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'


[[plugins]]
repo = 'tpope/vim-fugitive'


[[plugins]]
repo = 'luochen1990/rainbow'


[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = """
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
"""

