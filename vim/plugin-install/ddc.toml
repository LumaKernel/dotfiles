# ddc.vim
[[plugins]]
repo = 'Shougo/ddc.vim'

# repo = '~/ghq/github.com/Shougo/ddc.vim'
# merged = 0

depends = ['denops.vim']
on_event = ['InsertEnter', 'CursorHold', 'BufRead']
on_source = 'denops.vim'
hook_add = '''
set completeopt=menuone,noinsert,noselect
'''
lua_post_source = '''
local alias = vim.fn['ddc#custom#alias']
local patch_global = vim.fn['ddc#custom#patch_global']
local patch_filetype = vim.fn['ddc#custom#patch_filetype']

patch_global('ui', 'pum')
alias('source', 'win32yank.exe', 'run')
alias('source', 'recent', 'registers-words')
alias('source', 'search', 'registers-words')
alias('source', 'file-assets-public', 'file')
alias('source', 'file-buffer', 'file')
alias('source', 'node-modules', 'file')
alias('source', 'pick', 'eval')
alias('source', 'nvim-lsp', 'lsp')

-- local sources = {
--   'tabnine',
--   'coc-ls',
--   'treesitter',
--   'recent',
--   'search',
--   'tmux',
--   'around',
--   'buffer',
--   'file-buffer',
--   'file',
--   'win32yank.exe',
--   'nextword',
--   'pick',
-- }

local sources = {
  'nvim-lsp',
  'denippet',
  'node-modules',
  'file-assets-public',
  'tmux',
  'around',
  'file-buffer',
  'file',
}

if vim.fn.executable('win32yank.exe') == 1 then
  sources = vim.tbl_filter(function(x)
    return x ~= 'win32yank.exe'
  end, sources)
end

if vim.g.lsp_mode ~= 'coc' then
  sources = vim.tbl_filter(function(x)
    return not string.match(x, '^coc-.*')
  end, sources)
end

if vim.g.lsp_mode ~= 'nvim-lsp' then
  sources = vim.tbl_filter(function(x)
    return x ~= 'nvim-lsp'
  end, sources)
end

patch_global('autoCompleteEvents', {'TextChangedI', 'TextChangedP'})
patch_global('sources', sources)

patch_global('sourceOptions', {
  _ = {
    matchers = {'matcher_fuzzy'},
    sorters = {'sorter_rank'},
    ignoreCase = true,
  },
})

local name = 'around'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'A',
      matchers = {},
      minAutoCompleteLength = 4,
      maxItems = 5,
      dup = true,
    },
  },
  sourceParams = {
    [name] = {
      maxSize = 500,
    },
  },
})

local name = 'win32yank.exe'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'CLIP',
      maxItems = 20,
    },
  },
  sourceParams = {
    [name] = {
      cmd = {'win32yank.exe', '-o'},
    },
  },
})

local name = 'recent'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'R',
      maxItems = 20,
    },
  },
  sourceParams = {
    [name] = {
      registers = '/"0123456789',
    },
  },
})

local name = 'search'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'S',
      maxItems = 4,
    },
  },
  sourceParams = {
    [name] = {
      registers = '/',
    },
  },
})

local name = 'buffer'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'B',
      minAutoCompleteLength = 4,
      maxItems = 5,
    },
  },
  sourceParams = {
    [name] = {
      requireSameFiletype = false,
    },
  },
})

local name = 'nextword'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'EN',
      maxItems = 4,
      isVolatile = true,
      minAutoCompleteLength = 3,
    },
  },
  sourceParams = {
    [name] = {},
  },
})

local name = 'tabnine'

local name = 'tmux'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'TMUX',
      maxItems = 5,
    },
  },
  sourceParams = {
    [name] = {},
  },
})

local name = 'vim-lsp'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'VIM_LSP',
      isVolatile = true,
      maxItems = 30,
      forceCompletionPattern = '\\{|\\.|:|->|\'|"|<',
      dup = true,
    },
  },
  sourceParams = {
    [name] = {},
  },
})

local name = 'coc-ls'
patch_global({
  sourceOptions = {
    [name] = {
      mark = '',
      isVolatile = true,
      maxItems = 30,
      matchers = {'matcher_full_fuzzy'},
      minAutoCompleteLength = 1,
      forceCompletionPattern = '\\{|\\.|:|->|\'|"|<',
      dup = true,
    },
  },
  sourceParams = {
    [name] = {
      include = nil,
      exclude = {'F', 'A', 'B'},
    },
  },
})

patch_filetype({ 'json' }, {
  sourceOptions = {
    name = {
      matchers = {},
    },
  },
  sourceParams = {
    name = {},
  },
})

local name = 'node-modules'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'NODE',
      isVolatile = true,
      minAutoCompleteLength = 10000,
      forceCompletionPattern =
        '(?:'
          .. '\\bimport|'
          .. '\\bfrom|'
          .. '\\brequire\\s*\\(|'
          .. '\\bresolve\\s*\\(|'
          .. '\\bimport\\s*\\('
        .. ')'
        .. '\\s*(?:\'|"|`)[^\'"`]*',
    },
  },
  sourceParams = {
    [name] = {
      cwdMaxCandidates = 0,
      bufMaxCandidates = 0,
      followSymlinks = true,
      projMarkers = {'node_modules'},
      projFromCwdMaxCandidates = {},
      projFromBufMaxCandidates = {},
      beforeResolve = 'node_modules',
      displayFile = '',
      displayDir = '',
      displaySym = '',
      displaySymFile = '',
      displaySymDir = '',
      displayCwd = '',
      displayBuf = '',
    },
  },
})
patch_filetype(
  {
    'javascript',
    'typescript',
    'javascriptreact',
    'typescriptreact',
    'tsx',
  }, {
    sourceOptions = {
      [name] = {},
    },
    sourceParams = {
      [name] = {
        projFromBufMaxCandidates = {1000, 1000, 1000},
      },
    },
  }
)

local name = 'file-assets-public'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'PUBLIC',
      isVolatile = true,
      minAutoCompleteLength = 10000,
      forceCompletionPattern =
        '(?:'
          .. '\b(?:href|url|path|uri|src)=(?:"|\'|`)'
        .. ')',
    },
  },
  sourceParams = {
    [name] = {
      cwdMaxCandidates = 0,
      bufMaxCandidates = 0,
      followSymlinks = true,
      projMarkers = {'.next'},
      projFromCwdMaxCandidates = {},
      projFromBufMaxCandidates = {},
      beforeResolve = 'public',
      displayFile = '',
      displayDir = '',
      displaySym = '',
      displaySymFile = '',
      displaySymDir = '',
      displayCwd = '',
      displayBuf = '',
    },
  },
})
patch_filetype(
  {
    'javascript',
    'typescript',
    'javascriptreact',
    'typescriptreact',
    'tsx',
  }, {
    sourceOptions = {
      [name] = {},
    },
    sourceParams = {
      [name] = {
        projFromBufMaxCandidates = {1000, 1000, 1000},
      },
    },
  }
)


local name = 'file'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'F',
      isVolatile = true,
      forceCompletionPattern = '\\S/\\S*',
      dup = true,
    },
  },
  sourceParams = {
    [name] = {
      bufMaxCandidates = 0,
      followSymlinks = true,
      projMarkers = {'.git', 'package.json'},
      projFromCwdMaxCandidates = {1000},
      projFromBufMaxCandidates = {1000, 1000},
      displayFile = '',
      displayDir = '',
      displaySym = '',
      displaySymFile = '',
      displaySymDir = '',
    },
  },
})
patch_filetype(
  { 'ps1', 'dosbatch', 'autohotkey', 'registry' }, {
    sourceOptions = {
      [name] = {
        forceCompletionPattern = '\\S\\\\\\S*',
      },
    },
    sourceParams = {
      [name] = {
        mode = 'win32',
      },
    },
  }
)

local name = 'file-buffer'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'FB',
      isVolatile = true,
      forceCompletionPattern = '\\S/\\S*',
      dup = true,
    },
  },
  sourceParams = {
    [name] = {
      cwdMaxCandidates = 0,
      followSymlinks = true,
      projFromCwdMaxCandidates = {},
      projFromBufMaxCandidates = {},
      displayFile = '',
      displayDir = '',
      displaySym = '',
      displaySymFile = '',
      displaySymDir = '',
    },
  },
})
patch_filetype(
  { 'ps1', 'dosbatch', 'autohotkey', 'registry' }, {
    sourceOptions = {
      [name] = {
        forceCompletionPattern = '\\S\\\\\\S*',
      },
    },
    sourceParams = {
      [name] = {
        mode = 'win32',
      },
    },
  }
)

local name = 'pick'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'P',
      isVolatile = true,
      minAutoCompleteLength = 10000,
      matchers = {'matcher_fuzzy'},
      sorters = {},
    },
  },
  sourceParams = {
    [name] = {
      expr = 'g:ddc_pick_items',
    },
  },
})

local name = 'treesitter'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'TS',
    },
  },
  sourceParams = {
    [name] = {},
  },
})

local name = 'denippet'
patch_global({
  sourceOptions = {
    [name] = {
      mark = '',
    },
  },
  sourceParams = {
    [name] = {},
  },
})

local name = 'nvim-lsp'
patch_global({
  sourceOptions = {
    [name] = {
      mark = 'LS',
      matchers = {'matcher_full_fuzzy'},
      forceCompletionPattern = '\\.\\w*|:\\w*|->\\w*',
    },
  },
  sourceParams = {
    [name] = {
      lspEngine = 'nvim-lsp',
      enableResolveItem = true,
      enableAdditionalTextEdit = true,
    },
  },
})

vim.keymap.set('i', '<C-n>', function()
  if vim.fn['pum#visible']() then
    vim.fn['pum#map#insert_relative'](1)
  else
    vim.fn['ddc#map#manual_complete']()
  end
end, { silent = true })

vim.keymap.set('i', '<C-p>', function()
  if vim.fn['pum#visible']() then
    vim.fn['pum#map#insert_relative'](-1)
  else
    vim.fn['ddc#map#manual_complete']()
  end
end, { silent = true })

vim.keymap.set('i', '<C-y>', 'pum#map#confirm()', { silent = true, expr = true })

vim.g.ddc_pick_items = {}
local pick = function(word)
  vim.g.ddc_pick_items = vim.list_extend({{ word = word }}, vim.g.ddc_pick_items)
  if #vim.g.ddc_pick_items > 100 then
    vim.g.ddc_pick_items = vim.list_slice(vim.g.ddc_pick_items, 1, -2)
  end
end
vim.keymap.set('n', '*', function()
  pick(vim.fn.expand('<cword>'))
  return '<Plug>(asterisk-z*)'
end, { silent = true, expr = true })

vim.keymap.set('i', '<C-s><C-n>', function()
  return vim.fn['ddc#map#manual_complete']()
end, { silent = true })
vim.keymap.set('i', '<C-s><C-f>', function()
  return vim.fn['ddc#map#manual_complete']({'file-buffer', 'file'})
end, { silent = true })
vim.keymap.set('i', '<C-s><C-g>', function()
  return vim.fn['ddc#map#manual_complete']({'file-buffer'})
end, { silent = true })
vim.keymap.set('i', '<C-s><C-l>', function()
  return vim.fn['ddc#map#manual_complete']({'coc-ls'})
end, { silent = true })
vim.keymap.set('i', '<C-x><C-l>', function()
  return vim.fn['ddc#map#manual_complete']({'coc-ls'})
end, { silent = true })
vim.keymap.set('i', '<C-s><C-s>', function()
  return vim.fn['ddc#map#manual_complete']({'denippet'})
end, { silent = true })
vim.keymap.set('i', '<C-x><C-s>', function()
  return vim.fn['ddc#map#manual_complete']({'denippet'})
end, { silent = true })
vim.keymap.set('i', '<C-s><C-p>', function()
  return vim.fn['ddc#map#manual_complete']({'pick'})
end, { silent = true })
vim.keymap.set('i', '<C-x><C-p>', function()
  return vim.fn['ddc#map#manual_complete']({'pick'})
end, { silent = true })

vim.fn['ddc#enable']()
'''

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
depends = ['ddc.vim', 'pum.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-matcher_fuzzy'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nextword'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'delphinus/ddc-treesitter'
if = 'has("nvim")'
depends = ['ddc.vim', 'nvim-treesitter']
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
depends = ['ddc.vim']
on_source = 'ddc.vim'
# repo = '~/ghq/github.com/LumaKernel/ddc-file'
# merged = 0

[[plugins]]
repo = 'matsui54/ddc-buffer'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
depends = ['ddc.vim']
on_source = 'ddc.vim'
hook_add = '''
command! -bar EditTabNineConfig execute 'edit' ddc_tabnine#config_dir() . '/tabnine_config.json'
command! -bar TabNineConfig execute EditTabNineConfig
'''
# repo = '~/ghq/github.com/LumaKernel/ddc-tabnine'
# merged = 0
# hook_add = '''
# " let g:ddc_tabnine#storage_dir = expand('~/xxx-my-tabnine/binaries')
# " let g:ddc_tabnine#disable_auto_install = v:true
# '''

[[plugins]]
repo = 'delphinus/ddc-tmux'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-registers-words'
depends = ['ddc.vim']
on_source = 'ddc.vim'
# repo = '~/ghq/github.com/LumaKernel/ddc-registers-words'
# merged = 0

[[plugins]]
repo = 'shun/ddc-vim-lsp'

if = 0
# repo = '~/ghq/github.com/shun/ddc-vim-lsp'
# merged = 0

depends = ['ddc.vim', 'vim-lsp']
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-run'
depends = ['ddc.vim']
on_source = 'ddc.vim'
# repo = '~/ghq/github.com/LumaKernel/ddc-run'
# merged = 0

[[plugins]]
repo = 'LumaKernel/ddc-eval'
depends = ['ddc.vim']
on_source = 'ddc.vim'
# repo = '~/ghq/github.com/LumaKernel/ddc-eval'
# merged = 0

[[plugins]]
if = 0
repo = 'LumaKernel/ddc-coc-patched'
# rev = 'v0.0.0-2021-10-09'
rev = 'v0.0.0-2022-08-16'

# repo = '~/ghq/github.com/LumaKernel/ddc-coc-patched'
# merged = 0

depends = ['ddc.vim', 'coc-patching.nvim']
on_source = 'ddc.vim'
