# ddc.vim
[[plugins]]
repo = 'Shougo/ddc.vim'
hook_add = '''
set completeopt=menuone
'''
hook_post_source = '''
let g:ddc_sources = [
      \ 'treesitter',
      \ 'coc-patched',
      \ 'omni',
      \ 'coc-patched-1',
      \ 'file',
      \ 'around',
      \ 'buffer',
      \ 'tmux',
      \ 'neosnippet',
      \ 'win32yank',
      \ 'registers-words',
      \ 'nextword',
    \ ]
if !executable('win32yank.exe')
  call filter(g:ddc_sources, 'v:val isnot# "win32yank"')
endif
if !has('nvim')
  call filter(g:ddc_sources, 'v:val isnot# "treesitter"')
endif
if g:lsp_mode isnot# 'coc'
  call filter(g:ddc_sources, 'v:val !~# "coc-patched.*"')
endif
call ddc#custom#patch_global('sources', g:ddc_sources)

call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'matchers': ['matcher_fuzzy'],
    \   'sorters': ['sorter_rank'],
    \   'ignoreCase': v:true,
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'around': {
    \   'mark': 'A',
    \   'minAutoCompleteLength': 4,
    \   'maxCandidates': 5,
    \ }})
call ddc#custom#patch_global('sourceParams', {
    \ 'around': {
    \   'maxSize': 500,
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'win32yank': {
    \   'mark': 'CLIP',
    \   'maxCandidates': 20,
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'registers-words': {
    \   'mark': 'R',
    \   'maxCandidates': 20,
    \ }})
call ddc#custom#patch_global('sourceParams', {
    \ 'registers-words': {
    \   'registers': '/"0123',
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'buffer': {
    \   'mark': 'B',
    \   'minAutoCompleteLength': 4,
    \   'maxCandidates': 5,
    \ }})
call ddc#custom#patch_global('sourceParams', {
    \ 'buffer': {
    \   'requireSameFiletype': v:false,
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'nextword': {
    \   'mark': 'NEXT',
    \   'maxCandidates': 4,
    \   'isVolatile': v:true,
    \   'minAutoCompleteLength': 3,
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'neosnippet': {
    \   'mark': 'SNIP',
    \   'minAutoCompleteLength': 2,
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'tabnine': {
    \   'mark': 'TN',
    \   'maxCandidates': 5,
    \   'isVolatile': v:true,
    \   'minAutoCompleteLength': 2,
    \   'forceCompletionPattern': '.[^(]',
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'coc-patched-1': {
    \   'mark': '',
    \   'maxCandidates': 5,
    \   'isVolatile': v:true,
    \   'minAutoCompleteLength': 2,
    \   'forceCompletionPattern': '.[^(]',
    \ }})
call ddc#custom#patch_global('sourceParams', {
    \ 'coc-patched-1': {
    \   'include': ['TN'],
    \   'exclude': v:null,
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'tmux': {
    \   'mark': 'TMUX',
    \   'maxCandidates': 5,
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'coc-patched': {
    \   'mark': '',
    \   'maxCandidates': 30,
    \   'forceCompletionPattern': '\.',
    \   'minAutoCompleteLength': 1,
    \ }})
call ddc#custom#patch_global('sourceParams', {
    \ 'coc-patched': {
    \   'include': v:null,
    \   'exclude': ['F', 'A', 'B', 'TN'],
    \ }})
call ddc#custom#patch_filetype(
    \ ['json'], {
    \ 'sourceOptions': {
    \   'coc-patched': {
    \     'matchers': [],
    \   },
    \ },
    \ 'sourceParams': {
    \   'coc-patched': {
    \   },
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'file': {
    \   'mark': 'F',
    \   'isVolatile': v:true,
    \   'forceCompletionPattern': '\S/\S*',
    \ }})
call ddc#custom#patch_filetype(
    \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
    \ 'sourceOptions': {
    \   'file': {
    \     'forceCompletionPattern': '\S\\\S*',
    \   },
    \ },
    \ 'sourceParams': {
    \   'file': {
    \     'mode': 'win32',
    \   },
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'treesitter': {
    \   'mark': 'TS',
    \ }})

call ddc#custom#patch_global('sourceOptions', {
    \ 'omni': {
    \   'mark': 'O',
    \   'maxCandidates': 20,
    \ }})

inoremap <silent><expr> <TAB>
    \ pumvisible() ? '<C-n>' :
    \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
    \ '<TAB>' : ddc#manual_complete()
inoremap <silent><expr> <C-n> ddc#manual_complete()

inoremap <expr><S-TAB> pumvisible() ? '<C-p>' : '<C-h>'

" call timer_start(1000, {->execute('call ddc#enable()')})
call ddc#enable()

" Debug
" call ddc#custom#patch_global('sources', ['around'])
" call ddc#custom#patch_global('sources', ['file'])
" call ddc#custom#patch_global('sources', ['coc-patched'])
" call ddc#custom#patch_global('sources', ['registers-words'])
" call ddc#custom#patch_global('sources', ['win32yank'])
'''

[[plugins]]
repo = 'Shougo/ddc-around'
depends = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
depends = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
depends = ['ddc.vim']

[[plugins]]
repo = 'matsui54/ddc-matcher_fuzzy'
depends = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-nextword'
depends = ['ddc.vim']

[[plugins]]
repo = 'delphinus/ddc-treesitter'
if = 'has("nvim")'
depends = ['ddc.vim', 'nvim-treesitter']

[[plugins]]
repo = 'LumaKernel/ddc-file'
depends = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-omni'
depends = ['ddc.vim']

[[plugins]]
repo = 'matsui54/ddc-buffer'
depends = ['ddc.vim']

[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
if = '!IsPrivateMode()'
depends = ['ddc.vim']
hook_add = '''
command! -bar EditTabNineConfig execute 'edit' ddc_tabnine#config_dir() . '/tabnine_config.json'
'''

[[plugins]]
repo = 'delphinus/ddc-tmux'
depends = ['ddc.vim']

[[plugins]]
repo = 'LumaKernel/ddc-win32yank'
depends = ['ddc.vim']

[[plugins]]
repo = 'LumaKernel/ddc-registers-words'
depends = ['ddc.vim']

[[plugins]]
repo = 'LumaKernel/ddc-coc-patched'
depends = ['ddc.vim', 'coc-patched.nvim']



# Debug

# [[plugins]]
# repo = '~/ghq/github.com/LumaKernel/ddc-coc-patched'
# if = 1
# depends = ['ddc.vim', 'coc-patched.nvim']
# merged = 0

# [[plugins]]
# repo = '~/ghq/github.com/LumaKernel/ddc-win32yank'
# if = 1
# depends = ['ddc.vim']
# merged = 0
# 
# [[plugins]]
# repo = '~/ghq/github.com/LumaKernel/ddc-registers-words'
# if = 1
# depends = ['ddc.vim']
# merged = 0

# [[plugins]]
# repo = '~/ghq/github.com/LumaKernel/ddc-file'
# if = 1
# depends = ['ddc.vim']
# merged = 0

# [[plugins]]
# repo = '~/ghq/github.com/LumaKernel/ddc-tabnine'
# if = 1
# depends = ['ddc.vim']
# merged = 0
# hook_add = '''
# " let g:ddc_tabnine#storage_dir = expand('~/xxx-my-tabnine/binaries')
# " let g:ddc_tabnine#disable_auto_install = v:true
# '''
