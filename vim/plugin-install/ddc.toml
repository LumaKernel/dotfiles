# ddc.vim
[[plugins]]
repo = 'Shougo/ddc.vim'
if = 'g:complete_mode is# "ddc"'
hook_post_source = '''
if g:complete_mode is# "ddc"
  if has('nvim')
    call ddc#custom#patch_global('sources', [
        \ 'treesitter',
        \ 'tabnine',
        \ 'around',
        \ 'deoppet',
        \ 'nextword',
        \ 'file',
      \ ])
  else
  call ddc#custom#patch_global('sources', [
      \ 'tabnine',
      \ 'around',
      \ 'deoppet',
      \ 'nextword',
      \ 'file',
    \ ])
  endif

  call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_fuzzy'],
      \   'sorters': ['sorter_rank']},
      \ })
  call ddc#custom#patch_global('sourceOptions', {
      \ 'around': {
      \   'mark': 'A',
      \   'maxSize': 500,
      \ }})
  call ddc#custom#patch_global('sourceOptions', {
      \ 'nextword': {
      \   'mark': 'next',
      \   'maxCandidates': 3,
      \   'isVolatile': v:true,
      \   'minAutoCompleteLength': 3,
      \ }})
  call ddc#custom#patch_global('sourceOptions', {
      \ 'deoppet': {
      \   'dup': v:true,
      \   'mark': 'dp',
      \ }})
  call ddc#custom#patch_global('sourceOptions', {
      \ 'tabnine': {
      \   'mark': 'TN',
      \   'isVolatile': v:true,
      \ }})
  call ddc#custom#patch_global('sourceOptions', {
      \ 'file': {
      \   'mark': 'F',
      \   'isVolatile': v:true,
      \ }})
  call ddc#custom#patch_filetype(
      \ ['ps1', 'dosbatch', 'autohotkey', 'registry'],
      \ 'sourceParams', {
      \   'file': {
      \     'mode': 'win32',
      \   },
      \ })
  call ddc#custom#patch_global('sourceOptions', {
      \ 'treesitter': {
      \   'mark': 'TS',
      \ }})
  inoremap <silent><expr> <TAB>
      \ pumvisible() ? '<C-n>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#manual_complete()
  inoremap <silent><expr> <C-n> ddc#manual_complete()

  inoremap <expr><S-TAB> pumvisible() ? '<C-p>' : '<C-h>'

  " XXX: experimental
  " if exists('g:ddc#_initialized')
  "   call ddc#enable()
  " else
  "   augroup my-ddc
  "     autocmd User DDCReady ++once call ddc#enable()
  "   augroup END
  " endif
  call timer_start(1000, {->execute('call ddc#enable()')})
endif
'''

[[plugins]]
repo = 'Shougo/ddc-around'
depends = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
depends = ['ddc.vim']

[[plugins]]
repo = 'matsui54/ddc-matcher_fuzzy'
depends = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-nextword'
depends = ['ddc.vim']

[[plugins]]
repo = 'delphinus/ddc-treesitter'
if = 'has("nvim")'
depends = ['ddc.vim', 'nvim-treesitter']

[[plugins]]
repo = 'LumaKernel/ddc-file'
if = '1'
depends = ['ddc.vim']

[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
if = '!IsPrivateMode() && 1'
depends = ['ddc.vim']
hook_add = '''
command! -bar EditTabNineConfig execute 'edit' ddc_tabnine#config_dir() . '/tabnine_config.json'
'''


# Debug
# [[plugins]]
# repo = '~/ghq/github.com/LumaKernel/ddc-file'
# if = 0
# depends = ['ddc.vim']
# merged = 0
# hook_add = '''
# '''
