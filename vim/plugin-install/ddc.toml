# ddc.vim
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim']
on_event = 'InsertEnter'
on_source = 'denops.vim'
hook_add = '''
set completeopt=menuone
'''
hook_post_source = '''
call ddc#custom#alias('source', 'coc-ls', 'coc-patched')
call ddc#custom#alias('source', 'win32yank.exe', 'run')
call ddc#custom#alias('source', 'recent', 'registers-words')
call ddc#custom#alias('source', 'file-buffer', 'file')
let g:ddc_sources = [
      \ 'tabnine',
      \ 'coc-ls',
      \ 'treesitter',
      \ 'recent',
      \ 'tmux',
      \ 'around',
      \ 'buffer',
      \ 'file-buffer',
      \ 'file',
      \ 'neosnippet',
      \ 'win32yank.exe',
      \ 'nextword',
    \ ]
let g:ddc_sources = [
      \ 'tabnine',
      \ 'coc-ls',
      \ 'recent',
      \ 'tmux',
      \ 'around',
      \ 'buffer',
      \ 'file-buffer',
      \ 'file',
      \ 'neosnippet',
    \ ]

if !executable('win32yank.exe')
  call filter(g:ddc_sources, 'v:val isnot# "win32yank.exe"')
endif
if !has('nvim')
  call filter(g:ddc_sources, 'v:val isnot# "treesitter"')
endif
if g:lsp_mode isnot# 'coc'
  call filter(g:ddc_sources, 'v:val !~# "coc-.*"')
endif

call ddc#custom#patch_global('sources', g:ddc_sources)

call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'matchers': ['matcher_fuzzy'],
    \   'sorters': ['sorter_rank'],
    \   'ignoreCase': v:true,
    \ }})

let name = 'around'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': 'A',
    \     'matchers': ['matcher_full_fuzzy'],
    \     'minAutoCompleteLength': 4,
    \     'maxCandidates': 5,
    \     'dup': v:true,
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \     'maxSize': 500,
    \   },
    \ }})

let name = 'win32yank.exe'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': 'CLIP',
    \     'maxCandidates': 20,
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \     'cmd': ['win32yank.exe', '-o'],
    \   },
    \ }})

let name = 'recent'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': 'R',
    \     'maxCandidates': 20,
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \     'registers': '/"0123456789',
    \   },
    \ }})

let name = 'buffer'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': 'B',
    \     'minAutoCompleteLength': 4,
    \     'maxCandidates': 5,
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \     'requireSameFiletype': v:false,
    \   },
    \ }})

let name = 'nextword'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': 'EN',
    \     'maxCandidates': 4,
    \     'isVolatile': v:true,
    \     'minAutoCompleteLength': 3,
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \   },
    \ }})

let name = 'neosnippet'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': 'SNIP',
    \     'minAutoCompleteLength': 10000,
    \     'dup': v:true,
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \   },
    \ }})

let name = 'tabnine'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': 'TN',
    \     'maxCandidates': 5,
    \     'isVolatile': v:true,
    \     'minAutoCompleteLength': 2,
    \     'forceCompletionPattern': '.[^(]',
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \   },
    \ }})

let name = 'tmux'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': 'TMUX',
    \     'maxCandidates': 5,
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \   },
    \ }})

let name = 'coc-ls'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': '',
    \     'isVolatile': v:true,
    \     'maxCandidates': 30,
    \     'matchers': ['matcher_full_fuzzy'],
    \     'forceCompletionPattern': '\{|\.|:|->|''|"|<',
    \     'minAutoCompleteLength': 1,
    \     'dup': v:true,
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \     'include': v:null,
    \     'exclude': ['F', 'A', 'B'],
    \   },
    \ }})
call ddc#custom#patch_filetype(
    \ ['json'], {
    \ 'sourceOptions': {
    \   name: {
    \     'matchers': [],
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \   },
    \ }})

let name = 'file'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': 'F',
    \     'isVolatile': v:true,
    \     'forceCompletionPattern': '\S/\S*',
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \     'bufMaxCandidates': 0,
    \     'followSymlinks': v:true,
    \   },
    \ }})
call ddc#custom#patch_filetype(
    \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
    \ 'sourceOptions': {
    \   name: {
    \     'forceCompletionPattern': '\S\\\S*',
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \     'mode': 'win32',
    \   },
    \ }})

let name = 'file-buffer'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': 'F',
    \     'isVolatile': v:true,
    \     'forceCompletionPattern': '\S/\S*',
    \     'dup': v:true,
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \     'cwdMaxCandidates': 0,
    \     'followSymlinks': v:true,
    \     'projFromCwdMaxCandidates': [],
    \     'projFromBufMaxCandidates': [],
    \   },
    \ }})
call ddc#custom#patch_filetype(
    \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
    \ 'sourceOptions': {
    \   name: {
    \     'forceCompletionPattern': '\S\\\S*',
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \     'mode': 'win32',
    \   },
    \ }})

let name = 'treesitter'
call ddc#custom#patch_global({
    \ 'sourceOptions': {
    \   name: {
    \     'mark': 'TS',
    \   },
    \ },
    \ 'sourceParams': {
    \   name: {
    \   },
    \ }})

inoremap <silent><expr> <C-n>
    \ pumvisible() ? '<C-n>' : ddc#manual_complete()

" call timer_start(1000, {->execute('call ddc#enable()')})
call ddc#enable()

" Debug
" call ddc#custom#patch_global('sources', ['around'])
" call ddc#custom#patch_global('sources', ['file'])
" call ddc#custom#patch_global('sources', ['coc-ls'])
" call ddc#custom#patch_global('sources', ['registers-words'])
" call ddc#custom#patch_global('sources', ['tabnine'])
" call ddc#custom#patch_global('sources', ['win32yank.exe'])
'''

[[plugins]]
repo = 'Shougo/ddc-around'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-matcher_fuzzy'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nextword'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'delphinus/ddc-treesitter'
if = 'has("nvim")'
depends = ['ddc.vim', 'nvim-treesitter']
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
depends = ['ddc.vim']
on_source = 'ddc.vim'
# repo = '~/ghq/github.com/LumaKernel/ddc-file'
# merged = 0

[[plugins]]
repo = 'matsui54/ddc-buffer'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
depends = ['ddc.vim']
on_source = 'ddc.vim'
hook_add = '''
command! -bar EditTabNineConfig execute 'edit' ddc_tabnine#config_dir() . '/tabnine_config.json'
command! -bar TabNineConfig execute EditTabNineConfig
'''
# repo = '~/ghq/github.com/LumaKernel/ddc-tabnine'
# merged = 0
# hook_add = '''
# " let g:ddc_tabnine#storage_dir = expand('~/xxx-my-tabnine/binaries')
# " let g:ddc_tabnine#disable_auto_install = v:true
# '''

[[plugins]]
repo = 'delphinus/ddc-tmux'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-registers-words'
depends = ['ddc.vim']
on_source = 'ddc.vim'
# repo = '~/ghq/github.com/LumaKernel/ddc-registers-words'
# merged = 0

[[plugins]]
repo = 'LumaKernel/ddc-run'
depends = ['ddc.vim']
on_source = 'ddc.vim'
# repo = '~/ghq/github.com/LumaKernel/ddc-run'
# merged = 0

[[plugins]]
repo = 'LumaKernel/ddc-coc-patched'
rev = 'v0.0.0-2021-09-21'

# repo = '~/ghq/github.com/LumaKernel/ddc-coc-patched'
# merged = 0

depends = ['ddc.vim', 'coc-patched.nvim']
on_source = 'ddc.vim'
