[[plugins]]
repo = 'Shougo/dein.vim'

# Fern
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
let g:fern#profile = 0
let g:fern#disable_viewer_auto_duplication = 1
let s:fern_default_exclude_pats = [
  \   '^\.git$',
  \   '^\.DS_Store$',
  \   '^node_modules$',
  \   '^dist$',
  \   '^:Zone\.Identifier$',
  \   '^__pycache__$',
  \   '^yarn.lock$',
  \   '^package-lock.json$',
  \   '^pnpm-lock.yaml$',
  \ ]

function! s:GetFernExclude() abort
  let ignore_pats = copy(s:fern_default_exclude_pats)
  return join(ignore_pats, '\|')
endfunction

let g:fern#default_hidden = 1
let g:fern#default_exclude = s:GetFernExclude()

function! s:init_fern() abort
  silent! nunmap <buffer> t
endfunction

function! FernRevealPwdOrThere() abort
  if !filereadable(expand('%'))
    Fern .
    return ''
  endif
  try
    let F = vital#vital#import('System.Filepath')
  catch
    return ''
  endtry

  " TODO: VCS まで登ってもいいかも
  let dir = expand('%:p:h')
  if F.contains(dir, getcwd())
    let dir = getcwd()
  endif
  exe printf('Fern %s -reveal=%%', dir)
  return ''
endfunction

function! s:fern_default() abort
  let exclude_save = g:fern#default_exclude
  let g:fern#default_exclude = s:GetFernExclude()
  call FernRevealPwdOrThere()
  let g:fern#default_exclude = exclude_save
endfunction

function! s:fern_all() abort
  let exclude_save = g:fern#default_exclude
  let g:fern#default_exclude = ''
  call FernRevealPwdOrThere()
  let g:fern#default_exclude = exclude_save
endfunction

nnoremap <silent> <Leader>ai :<C-u>call <SID>fern_default()<CR>
nnoremap <silent> <Leader>aa :<C-u>call <SID>fern_all()<CR>
nnoremap <silent> <Leader>ak :<C-u>Fern bookmark:///<CR>

augroup my-fern
  autocmd! *
  " autocmd FileType fern call s:init_fern()
augroup END

let g:loaded_netrw             = 1
let g:loaded_netrwPlugin       = 1
let g:loaded_netrwSettings     = 1
let g:loaded_netrwFileHandlers = 1

augroup my-fern-hijack
  autocmd!
  autocmd BufEnter * ++nested call s:hijack_directory()
augroup END

function! s:hijack_directory() abort
  let path = expand('%')
  if !isdirectory(path)
    return
  endif
  exe 'Fern' path
endfunction
'''

# Asterisk Improved
[[plugins]]
repo = 'haya14busa/vim-asterisk'
hook_add = '''
let g:asterisk#keeppos = 1
if g:complete_mode !=# 'ddc'
  nmap *  <Plug>(asterisk-z*)
endif
vmap *  <Plug>(asterisk-z*)
omap *  <Plug>(asterisk-z*)
map #  <Plug>(asterisk-z*)N
map g* <Plug>(asterisk-gz*)
map g# <Plug>(asterisk-gz*)N
xmap *  <Plug>(asterisk-z*)
xmap #  <Plug>(asterisk-z*)N
xmap g* <Plug>(asterisk-gz*)
xmap g# <Plug>(asterisk-gz*)N
'''

# Vital Vim
[[plugins]]
repo = 'vim-jp/vital.vim'
merged = 0
[[plugins]]
repo = 'haya14busa/vital-safe-string'
depends = ["vital.vim"]
[[plugins]]
repo = 'lambdalisue/vital-Whisky'
depends = ["vital.vim"]

# Startify
[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
function! s:repeat(str, num)
  return join(map(range(a:num), 'a:str'), '')
endfunction

let g:my_startify_message = [
      \   "\uf120  Welcome to \ue7c5 !",
      \ ]

let g:startify_enable_special = 0
let g:startify_session_dir = '~/.tmp/vim/startify-session'

let g:startify_custom_header = 'startify#pad(g:my_startify_message)'

" .git とか (VCS) が見つかるまで上に登って change directory する
let g:startify_change_to_dir = 1
let g:startify_change_to_vcs_root = 1


" 最新の状態にする
let g:startify_update_oldfiles = 0

let g:startify_session_persistence = 1

let g:startify_bookmarks = [
      \   '~/cp',
      \   '~/mynote',
      \   '~/work',
      \   '~/dotfiles',
      \   '~/vim-make-plugin',
      \   '~/.cache/dein/repos',
      \ ]

function! s:MyColorSelections()
  let names = getcompletion('', 'color')
  let excludes = [
      \   'blue',
      \   'default',
      \   'delek',
      \   'elflord',
      \   'evening',
      \   'industry',
      \   'koehler',
      \   'morning',
      \   'murphy',
      \   'pablo',
      \   'peachpuff',
      \   'ron',
      \   'shine',
      \   'slate',
      \   'torte',
      \   'zellner',
      \ ]

  call filter(names, {_, name -> index(excludes, name) < 0})
  return map(copy(names), {_, colo -> {'line': colo, 'cmd': printf('SwitchColorScheme %s', colo)}})
endfunction

function! s:MyRefs()
  return [
        \   { 'line': 'GNU Make Manual' , 'cmd': 'Ref lynx https://www.gnu.org/software/make/manual/make.html' },
        \   { 'line': 'ECMA262' , 'cmd': 'Ref lynx https://tc39.es/ecma262/' },
        \ ]
endfunction

function! s:MyLinks()
  let l:res = [
        \   { 'line': 'カラースキーム一覧' , 'url': 'http://colorswat.ch/vim/list?p=2&o=star' },
        \   { 'line': 'カラースキーム一覧' , 'url': 'http://vimcolors.com/' },
        \   { 'line': 'Nerd Fonts チートシート' , 'url': 'https://www.nerdfonts.com/cheat-sheet' },
        \ ]

  for el in l:res
    if has_key(el, 'url')
      let el.line ..= ' : ' .. el.url
      let el.cmd = ':OpenBrowser ' .. el.url
      unlet el.url
    endif
  endfor

  return l:res
endfunction


let g:startify_commands = [
      \   ':echo "hi"',
      \   ':GhostTextEnable',
      \   ':call dein#recache_runtimepath()',
      \   ':call dein#check_update()',
      \   ':call dein#update()',
      \   ":call dein#update(['ddc-file','ddc-tabnine','ddc-run','ddc-coc-patched','ddc-registers-words'])",
      \   ':call dein#build()',
      \   ':call dein#remote_plugins()',
      \   ':DeinClean',
      \   ':CocConfig',
      \   ':History',
      \   ':Colors',
      \ ]

let g:startify_lists = [
      \ { 'type': 'commands',  'header': ["   \uf489 コマンド"] },
      \ { 'type': function('s:MyColorSelections'),  'header': ["   \u26a1 カラーテーマ"] },
      \ { 'type': function('s:MyRefs'),  'header': ["   \uf002 リファレンス"] },
      \ { 'type': function('s:MyLinks'),  'header': ["   \u26a1 便利リンク"] },
      \ ]

nnoremap <silent> ,s :<C-u>Startify \| only<CR>
'''
hook_post_source = '''
augroup init_vim
  au User StartifyReady silent! nunmap <buffer> q
  au User StartifyReady silent! nunmap <buffer> q
  au User StartifyReady silent! nunmap <buffer> t
  au User StartifyReady silent! nunmap <buffer> T
  au User StartifyReady silent! nunmap <buffer> T
augroup END
'''

# Speed up nvim startup time
[[plugins]]
repo = 'lewis6991/impatient.nvim'
if = 'has("nvim")'
hook_source = '''
lua require('impatient')
'''

[[plugins]]
repo = 'nathom/filetype.nvim'
if = 'has("nvim")'
depends = 'impatient.nvim'
hook_source = '''
let g:did_load_filetypes = 1
'''
