[[plugins]]
repo = 'LumaKernel/vim-lsp'
rev = 'dev'
hook_add = '''
  function! MyRef() abort
    if &ft == 'vim' || &ft == 'help'
      return 'K'
    else
      return ":\<C-u>LspHover\<CR>"
    endif
  endfunction

  nnoremap <silent><expr> K MyRef()
  nnoremap <silent> Q :<C-u>LspCodeAction<CR>
  xnoremap <silent> Q :<C-u>'<,'>LspCodeAction<CR>
  nnoremap <silent> gd :<C-u>LspDefinition<CR>
  nnoremap <silent> gt :<C-u>LspTypeDefinition<CR>
  nnoremap <silent> gi :<C-u>LspImplementation<CR>
  nnoremap <silent> <SPACE>ll :<C-u>LspDocumentDiagnostics<CR>
  nnoremap <silent> ]g :LspNextDiagnostic<CR>
  nnoremap <silent> [g :LspPreviousDiagnostic<CR>
  nnoremap <silent> ]e :LspNextError<CR>
  nnoremap <silent> [e :LspPreviousError<CR>
  nnoremap <silent> gr :LspRename<CR>

  let g:lsp_virtual_text_prefix = "> "
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_virtual_text_enabled = 0
  let g:lsp_diagnostics_float_cursor = 1

  highlight link LspErrorHighlight Error
  highlight link LspWarningHighlight Warning

  let g:lsp_signs_priority = 50
  let g:lsp_semantic_enabled = 1

  let s:ft = [
    \   'javascript',
    \   'javascriptreact',
    \   'typescript',
    \   'typescriptreact',
    \   'python',
    \   'go',
    \ ]

  setglobal omnifunc=lsp#complete

  " 名前は vim-lsp-settings と衝突しないように
  " my- をつける
  
  let g:nvim_venv_pyls = expand('~/.local/venvs/nvim/bin/pyls')
  if executable(g:nvim_venv_pyls)
    autocmd User lsp_setup call lsp#register_server({
      \   'name': 'my-pyls',
      \   'cmd': {server_info->[g:nvim_venv_pyls]},
      \   'whitelist': ['python'],
      \   'workspace_config': {
      \     'pyls': {
      \       'plugins': {
      \         'pyflakes': { 'enabled': v:false },
      \         'flake8': { 'enabled': v:false },
      \         'pycodestyle': { 'enabled': v:false },
      \         'pydocstyle': { 'enabled': v:false },
      \         'pylint': { 'enabled': v:false },
      \         'mccabe': { 'enabled': v:false },
      \         'pyls_mypy': { 'enabled': v:true, 'live_mode': v:false },
      \       }
      \     }
      \   }
      \ })
  endif

  if executable('rome') && 0
    augroup my-lsp-rome
      autocmd!
      autocmd User lsp_setup call lsp#register_server({
         \   'name': 'my-rome-lsp',
         \   'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), '.config/'))},
         \   'cmd': {server_info->['rome', 'lsp']},
         \   'allowlist': ['javascript', 'javascriptreact', 'typescript', 'typescriptreact'],
         \ })
    augroup END
  endif

  if 0
    echom "[Warning] LSP Logging is on."
    let g:lsp_log_file = expand('~/vim-lsp.log')
    call delete(g:lsp_log_file)
  endif
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = 'vim-lsp'
# ~/.local/share/vim-lsp-settings/servers
hook_add = '''
  let g:lsp_settings = {
      \   'pyls': {
      \     'disabled': 1,
      \     'workspace_config': {
      \       'pyls': {
      \         'plugins': {
      \           'pyflakes': { 'enabled': v:false },
      \           'flake8': { 'enabled': v:false },
      \           'pycodestyle': { 'enabled': v:false },
      \           'pydocstyle': { 'enabled': v:false },
      \           'pylint': { 'enabled': v:false },
      \           'mccabe': { 'enabled': v:false },
      \         }
      \       }
      \     }
      \   },
      \   'typescript-language-server': {
      \     'disabled': 0,
      \     'workspace_config': {
      \       'typescript': {
      \         'preferences': {
      \           'importModuleSpecifier': 'non-relative',
      \         }
      \       }
      \     }
      \   }
      \ }
'''

# [[plugins]]
# repo = 'lighttiger2505/deoplete-vim-lsp'
# depends = ['vim-lsp', 'deoplete.nvim']

[[plugins]]
repo = 'tsuyoshicho/vim-efm-langserver-settings'
depends = ['vim-lsp']
hook_add = '''
  let g:efm_langserver_settings#config_file = expand('~/dotfiles/vim/efm-settings.yml')

  if 0
    echom "[Warning] efm Logging is on."
    let g:efm_langserver_settings#debug = 5
    let g:efm_langserver_settings#debug_file = expand('~/efm.log')
    call delete(g:efm_langserver_settings#debug_file)
  endif
'''
