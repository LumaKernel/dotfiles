# プラグイン追加時のあれこれ
#
# - ファイルタイプ専用のものであれば，専用TOMLファイルに追加
# - Lazy にする場合 (on_ft なども含まれる) は，
#   dein#check_lazy_plugins() でチェック
#   この設定は，基本いらないとすら思っていい


[[plugins]]
repo = 'Shougo/dein.vim'


[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  set helplang=ja
'''


[[plugins]]
repo = 'LumaKernel/open-browser.vim'
rev = 'support_wsl2'
hook_add = '''
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''


[[plugins]]
repo = 'jacoborus/tender.vim'
[[plugins]]
repo = 'cocopon/iceberg.vim'
[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = 'let g:switch_color_scheme_default = "onedark"'
[[plugins]]
repo = 'rhysd/vim-color-spring-night'
[[plugins]]
repo = 'dracula/vim'
name = 'colorscheme-dracula-vim'
[[plugins]]
repo = 'jpo/vim-railscasts-theme'
[[plugins]]
repo = 'junegunn/seoul256.vim'
[[plugins]]
repo = 'fcpg/vim-orbital'
[[plugins]]
repo = 'drewtempelmeyer/palenight.vim'
[[plugins]]
repo = 'AlessandroYorba/Sierra'
[[plugins]]
repo = 'NLKNguyen/papercolor-theme'
[[plugins]]
repo = 'cormacrelf/vim-colors-github'


[[plugins]]
repo = 'itchyny/vim-parenmatch'
[[plugins]]
repo = 'itchyny/vim-cursorword'
if = '!g:from_pwsh'


[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
  let s:fern_default_exclude_pats = ['^\.git$', '^\.DS_Store$', '^node_modules$', '^dist$', '^:Zone\.Identifier$']

  function! s:GetFernExclude() abort
    let ignore_pats = copy(s:fern_default_exclude_pats)
    return join(ignore_pats, '\|')
  endfunction


  let g:fern#default_hidden = 1
  let g:fern#default_exclude = s:GetFernExclude()

  function! s:init_fern() abort
    silent! nunmap <buffer> t
  endfunction

  function! FernRevealPwdOrThere() abort
    if !filereadable(expand('%'))
      Fern .
      return ''
    endif
    let F = vital#vital#import('System.Filepath')
    " XXX: VCS まで登ってもいいかも
    let dir = expand('%:p:h')
    if F.contains(dir, getcwd())
      let dir = getcwd()
    endif
    exe printf('Fern %s -reveal=%s', dir, expand('%'))
    return ''
  endfunction

  function! s:fern_default() abort
    let exclude_save = g:fern#default_exclude
    let g:fern#default_exclude = s:GetFernExclude()
    call FernRevealPwdOrThere()
    let g:fern#default_exclude = exclude_save
  endfunction

  function! s:fern_all() abort
    let exclude_save = g:fern#default_exclude
    let g:fern#default_exclude = ''
    call FernRevealPwdOrThere()
    let g:fern#default_exclude = exclude_save
  endfunction

  nnoremap <silent> <Leader>ai :<C-u>call <SID>fern_default()<CR>
  nnoremap <silent> <Leader>aa :<C-u>call <SID>fern_all()<CR>

  augroup my-fern
    autocmd! *
    autocmd FileType fern call s:init_fern()
  augroup END

  let g:loaded_netrw             = 1
  let g:loaded_netrwPlugin       = 1
  let g:loaded_netrwSettings     = 1
  let g:loaded_netrwFileHandlers = 1

  augroup my-fern-hijack
    autocmd!
    autocmd BufEnter * ++nested call s:hijack_directory()
  augroup END

  function! s:hijack_directory() abort
    let path = expand('%')
    if !isdirectory(path)
      return
    endif
    exe 'Fern' path
  endfunction
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
depends = 'fern.vim'
hook_add = '''
  let g:fern_git_status#disable_untracked = 1
'''

[[plugins]]
repo = 'lambdalisue/fern-mapping-git.vim'
depends = 'fern.vim'


[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('python3') || has('nvim')"
hook_add = '''
  let g:deoplete#enable_at_startup = 1

  " call deoplete#custom#option({
  "     \ 'auto_complete': 0,
  "     \ })

  inoremap <silent><expr> <C-g><C-l>
    \ (pumvisible() ? "\<C-e>" : '') .
    \ deoplete#manual_complete(['lsp'])

  " call deoplete#custom#source('_',
  "       \ 'matchers', ['matcher_full_fuzzy'])

'''

[[plugins]]
repo = 'Shougo/neosnippet.vim' # {{{
hook_add = '''
  let g:neosnippet#snippets_directory = ['~/lib-cpp/', '~/dotfiles/vim/snippets/']

  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_or_target)
''' # }}}

[[plugins]]
repo = 'Shougo/neosnippet-snippets'


[[plugins]]
if = 'has("python3") && !has("nvim") && !has("win32unix")'
repo = 'roxma/nvim-yarp'


[[plugins]]
# NOTE : pip insetall --user pynvim
if = 'has("python3") && !has("nvim") && !has("win32unix")'
repo = 'roxma/vim-hug-neovim-rpc'


[[plugins]]
repo = 'LumaKernel/indentLine'
hook_add = '''
  let g:indentLine_color_gui = "Grey60"
  let g:indentLine_fileTypeExclude = [
      \   'markdown',
      \   'startify',
      \   'help',
      \   'fern',
      \   'man',
      \   'info',
      \ ]
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim' # {{{
hook_add = '''
  let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:20,results:50'
  let g:ctrlp_show_hidden = 1

  " ファイルのみ
  let g:ctrlp_types = ['fil']
  " ワーキングディレクトリ として pwd から上に上がって .git
  " があるディレクトリを探す
  let g:ctrlp_working_path_mode = 'w'
  let g:ctrlp_lazy_update = 200
  let g:ctrlp_custom_ignore = {
    \   'dir':  '\v([\/]\.(git|hg|svn)$|node_modules)',
    \   'file': '\v\.(exe|so|dll|o|vo|aux|glob)$',
    \   'link': '',
    \ }
  if executable('ag')
    " CtrlPのキャッシュを使わない
    let g:ctrlp_use_caching=0
    let g:ctrlp_user_command='ag %s -i --nogroup --nocolor -g ""'
  endif
''' # }}}

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
  nnoremap <Leader>cw :<C-u>ChooseWin<CR>
  nnoremap <Leader>cs :<C-u>ChooseWinSwap<CR>
'''


[[plugins]]
repo = 'junegunn/fzf'
merged = 0
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
  if has('win32')
    " Windows: preview は相性があまりよくない
    "   UTF-8 と CP932 を両方見れるようにするのがまず難しいそう
    let $FZF_DEFAULT_OPTS = '--tabstop=4 --reverse'
  else
    let file_viewer = 'cat {} 2>/dev/null'
    let dir_viewer = 'ls {}'
    if executable('bat')
      let file_viewer = 'bat --pager=never --color=always --style=numbers {} 2>/dev/null'
    endif
    if executable('exa')
      let dir_viewer = 'exa --tree --color always {}'
    endif
    let $FZF_DEFAULT_OPTS = printf('--tabstop=4 --reverse --preview "%s || %s"', file_viewer, dir_viewer)
  endif

  if executable('ag') && $FZF_DEFAULT_COMMAND ==# ''
    let $FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'
  endif

  if has('nvim')
    let g:fzf_layout = { 'window': 'call my#CreateCenteredFloatingWindow()' }
  endif

  command! -bang Colors call fzf#vim#colors({'options': '--preview ""'}, <bang>0)


  nnoremap <silent> ,f  :<C-u>Files<CR>
  nnoremap <silent> ,df :<C-u>GFiles<CR>
  nnoremap <silent> ,dd :<C-u>GFiles?<CR>
  nnoremap <silent><expr> ,cf ':<C-u>Files<CR>' .. expand('<cfile>')
  nnoremap <silent><expr> ,cdf ':<C-u>GFiles<CR>' .. expand('<cword>')
  nnoremap <silent><expr> ,cdd ':<C-u>GFiles?<CR>' .. expand('<cword>')
  nnoremap <silent> <Leader>i :<C-u>History<CR>
  nnoremap <silent> <Leader>ls :<C-u>Buffers<CR>
  nnoremap <silent> <Leader>col :<C-u>Colors<CR>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config['_'] = {
      \   'outputter' : 'quickfix',
      \   'runner' : has('+job') ? 'job' : 'vimproc'
      \ }
  nnoremap <expr> <Leader>0 ":ccl\|QuickRun\<CR>"
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = 'w0rp/ale' # {{{
if = 0
hook_add = '''
  " エラー行に表示するマーク
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '>>'

  let g:ale_list_window_size = 1

  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  let g:ale_sign_column_always = 1

  let g:ale_lint_on_enter = 1
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 'always'
  let g:ale_lint_on_filetype_changed = 1
  let g:ale_lint_on_insert_leave = 1

  let g:ale_set_loclist = 1
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0

  let g:ale_linters = get(g:, 'ale_linters', {})
  let g:ale_fixers = get(g:, 'ale_fixers', {})

  let g:ale_fixers['*'] = ['remove_trailing_lines', 'trim_whitespace']

  nmap <silent> <Leader>p <Plug>(ale_previous_wrap)
  nmap <silent> <Leader>n <Plug>(ale_next_wrap)
'''
# }}}


[[plugins]]
repo = 'unblevable/quick-scope'


[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
if = 0
hook_add='''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
'''
hook_post_source='''
  " call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
  "    \ 'name': 'neosnippet',
  "    \ 'whitelist': ['*'],
  "    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
  "    \ }))
'''


[[plugins]]
repo = 'AndrewRadev/linediff.vim'
# Visual モードで :Linediff

[[plugins]]
if = "!has('win32')"
repo = 'liuchengxu/vista.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'


[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_post_source = '''
  " -- status の設定
  call gina#custom#command#alias('status', 's')
  call gina#custom#command#option('s', '--short')

  call gina#custom#command#alias('log', 'lg')
  call gina#custom#command#option('lg', '--graph')

  nnoremap <silent> <Leader>st :<C-u>Gina s<CR>
  nnoremap <silent> <Leader>cc :<C-u>Gina compare<CR>
  nnoremap <silent> <Leader>com :<C-u>tabnew \| Gina commit<CR>:split \| Gina diff --cached<CR>:wincmd w<CR>
  nnoremap <silent> <Leader>dd :<C-u>Gina diff HEAD<CR>
  nnoremap <silent> <Leader>lg :<C-u>Gina lg<CR>
  nnoremap <silent> <Leader>bla :<C-u>Gina blame<CR>

  function! s:Browse(line1, line2) abort
    let save = @@
    let @@ = ''
    if filereadable(expand('%'))
      execute printf('%d,%dGina browse --yank :', a:line1, a:line2)
    else
      Gina browse --yank
    endif
    if !empty(@@)
      execute "OpenBrowser" @@
    endif
    let @@ = save
  endfunction

  command! -range Browse call <SID>Browse(<line1>, <line2>)
  command! -range GitHubBrowse call <SID>Borwse(<line1>, <line2>)
  nnoremap <silent> <Leader>bro :Browse<CR>
  xnoremap <silent> <Leader>bro :Browse<CR>
'''

[[plugins]]
repo = 'kshenoy/vim-signature'


[[plugins]]
repo = 'luochen1990/rainbow'


[[plugins]]
repo = 'haya14busa/vim-asterisk'
hook_add = '''
  let g:asterisk#keeppos = 1
  map *  <Plug>(asterisk-z*)
  map #  <Plug>(asterisk-z*)N
  map g* <Plug>(asterisk-gz*)
  map g# <Plug>(asterisk-gz*)N
  xmap *  <Plug>(asterisk-z*)
  xmap #  <Plug>(asterisk-z*)N
  xmap g* <Plug>(asterisk-gz*)
  xmap g# <Plug>(asterisk-gz*)N
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(LiveEasyAlign)
  nmap ga <Plug>(LiveEasyAlign)
'''

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'osyo-manga/ref-lynx'

[[plugins]]
repo = 'HiPhish/info.vim'

[[plugins]]
repo = 'mattn/emmet-vim'
# for preact
# let g:user_emmet_settings = emmet#merge(get(g:, 'user_emmet_settings'), { 'jsx': { 'attribute_name': {'class': 'class'}}})

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'mattn/vim-sonictemplate'
hook_add = '''
  let g:sonictemplate_vim_template_dir = expand("~/dotfiles/vim/sonictemplate")
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
# [s]urround ([a]dd/[d]elete/[r]ename)
# [i]nner [b]races
# [a] [b]raced text

[[plugins]]
repo = 'terryma/vim-expand-region'
# + : expand
# _ : shrink
# TODO: 設定が下手くそかも，html でおもったより一気に expand される

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
# gS : split
# gJ : join

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
# [x, ]x : jumps

[[plugins]]
repo = 'rhysd/accelerated-jk'
# 重いときに j/k を叩きまくった後の硬直を緩和してくれる
hook_add = '''
  nmap j <Plug>(accelerated_jk_gj)
  nmap k <Plug>(accelerated_jk_gk)
  nmap gj <Plug>(accelerated_jk_j)
  nmap gk <Plug>(accelerated_jk_k)
'''

[[plugins]]
repo = 'rhysd/reply.vim'
on_cmd = ['Repl', 'ReplAuto']
# :ReplSend : 現在行を Repl で開いたバッファに送る

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'othree/yajs.vim'

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
      startinsert
    endif

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
  endfunction
'''

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
# GitHub Favored Markdown Syntax

# [[plugins]]
# repo = 'skywind3000/asyncrun.vim'
# XXX: まだ未調整
# vim-dispatchのほうがいいかな，むずかしい
# vim-test かな

[[plugins]]
repo = 'LumaKernel/fern-mapping-fzf.vim'
depends = ['fzf', 'fern.vim']
hook_add = '''
  function! s:reveal(dict) abort
    execute "FernReveal" a:dict.relative_path
  endfunction
  let g:Fern_mapping_fzf_file_sink = function('s:reveal')
  let g:Fern_mapping_fzf_dir_sink = function('s:reveal')
'''

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'LumaKernel/fern-mapping-reload-all.vim'
depends = ['fern.vim']
hook_add = '''
  function! s:init_fern_mapping_reload_all() abort
    nmap <buffer> R <Plug>(fern-action-reload:all)
  endfunction
  augroup my-fern-mapping-reload-all
    autocmd! *
    autocmd FileType fern call s:init_fern_mapping_reload_all()
  augroup END
'''

[[plugins]]
repo = 'thinca/vim-zenspace'

[[plugins]]
repo = 'LumaKernel/vim-messages-qf'
meged = 0
hook_add = '''
  command! -bar MessagesQF call g:messages_qf#messages() | Cedit
'''

[[plugins]]
repo = 'tbodt/deoplete-tabnine'
if = 0
build = './install.sh'

[[plugins]]
repo = 'briancollins/vim-jst'
# EJS など

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'LumaKernel/vim-jsx-pretty'

[[plugins]]
repo = 'kana/vim-altr'
# call altr#define('src/%.css', 'dist/%.css')
hook_add = '''
  nmap <SPACE>ap <Plug>(altr-back)
  nmap <SPACE>an <Plug>(altr-forward)
'''

[[plugins]]
repo = 'thinca/vim-localrc'
hook_add = '''
  let g:localrc_filename = 'local_init.vim'
'''

[[plugins]]
repo = 'vim-python/python-syntax'
hook_add = '''
  let g:python_highlight_all = 1
'''

[[plugins]]
repo = 'yuki-ycino/fzf-preview.vim'
build = 'yarn'
hook_add = '''
  nnoremap ,g :FzfPreviewProjectGrep<SPACE>
  nnoremap ,rg :FzfPreviewProjectGrepRaw<SPACE>

  command! -nargs=+ FzfPreviewProjectGrepRaw call <SID>FzfPreviewProjectGrepLiterally(<q-args>)

  function! s:FzfPreviewProjectGrepLiterally(str) abort
    let literal = a:str

    let regex = Regex7Escape(literal)
    let regex = substitute(regex, '[\n\r]', '[\s\S]?', 'g')
    let regex = substitute(regex, '\t', '\\t', 'g')

    " let bash_str = printf('"%s"', BashDStringEscape(regex))

    let str = EscapeFArgs(regex)

    execute printf('FzfPreviewProjectGrep -- %s', str)
  endfunction

  function! s:FzfPreviewProjectGrepSelected() abort
    let yank_save = @@
    normal! gvy
    let copied = @@
    let @@ = yank_save

    call s:FzfPreviewProjectGrepLiterally(copied)
  endfunction

  nnoremap <expr><silent> ,cg ':call <SID>FzfPreviewProjectGrepLiterally(expand("<cword>"))<CR>'
  xnoremap ,g :<C-u>call <SID>FzfPreviewProjectGrepSelected()<CR>
  xnoremap ,cg :<C-u>call <SID>FzfPreviewProjectGrepSelected()<CR>

  nnoremap ,rf :<C-u>FzfPreviewProjectMrwFiles<CR>
'''

[[plugins]]
repo = 'puremourning/vimspector'
hook_add = '''
  let g:vimspector_enable_mappings='HUMAN'
'''

[[plugins]]
repo = 'LumaKernel/vim-goimports'
hook_add = '''
  let g:goimports_simplify = 1
  let g:goimports_loclist = 0
'''

[[plugins]]
repo = 'udalov/kotlin-vim'

[[plugins]]
repo = 'lambdalisue/vim-findent'
hook_add = '''
  silent! EditorConfigDisable
  augroup findent
    autocmd!
    autocmd BufNewFile,BufReadPost,BufFilePost * execute "Findent --no-messages --no-warnings --chunksize=300" | call timer_start(0, {-> execute("silent! EditorConfigReload")})
  augroup END
'''

[[plugins]]
if = "has('nvim')"
repo = 'norcalli/nvim-colorizer.lua'
hook_post_source = '''
  lua require'colorizer'.setup()
'''

[[plugins]]
repo = 'ocaml/vim-ocaml'

[[plugins]]
if = 0
# TODO: 動かないとりあえず保留
# if = "has('nvim') && !has('win32')"
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_source ='''
  lua require'nvim-treesitter.configs'.setup { ensure_installed = 'all' }
'''

[[plugins]]
repo = 'tweekmonster/django-plus.vim'

[[plugins]]
if = "has('nvim')"
repo = 'LumaKernel/nvim-visual-eof.lua'
hook_post_source ='''
  lua require'visual-eof'.setup { hl_EOL = 'NonText'; }
'''

[[plugins]]
repo = 'yutakatay/auto-paste-mode.vim'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
  let g:better_whitespace_enabled = 1
  let g:strip_whitespace_on_save = 0
  let g:strip_max_file_size = 5000
'''

[[plugins]]
repo = 'relastle/vim-nayvy'
hook_add = '''
  let g:nayvy_import_path_format = 'all_absolute'
'''

[[plugins]]
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo = 'sentriz/vim-print-debug'
hook_add = '''

  function! s:my_print_debug() abort
    if exists('t:print_debug_current_nr')
      if t:print_debug_current_nr >= 96 + 26
        let t:print_debug_current_nr = 96
      endif
    endif
    if !&modifiable
      echohl WarningMsg
      echomsg "[my print debug] not modifiable..."
      echohl None
      return
    endif
    call print_debug#print_debug()
  endfunction

  nnoremap <Space>p :<C-u>call <SID>my_print_debug()<CR>

  let g:my_debug_style = [
    \   'color:red',
    \   'background:black',
    \   'display:inline-block',
    \   'padding:0.2em',
    \   'font-size:1em',
    \ ]
  call map(g:my_debug_style, {_, v -> printf("% !importnant;")})
  let g:my_debug_style = join(g:my_debug_style, '')

  let g:my_html_print_debug = printf('<span style="%s">_x_[XXX]_x_: {}</span>', g:my_debug_style)

  let g:print_debug_templates = {
    \   'go':              'fmt.Printf("_x_[XXX]_x_ {}\n")',
    \   'python':          'print(f"_x_[XXX]_x_ {}")',
    \   'javascript':      'console.log(`_x_[XXX]_x_ {}`);',
    \   'javascriptreact': 'console.log(`_x_[XXX]_x_ {}`);',
    \   'typescript':      'console.log(`_x_[XXX]_x_ {}`);',
    \   'typescriptreact': 'console.log(`_x_[XXX]_x_ {}`);',
    \   'c':               'printf(_x_[XXX]_x_ {}\n");',
    \   'cpp':             'std::cout << ("_x_[XXX]_x_ {}\n") << std::endl;',
    \   'html':            g:my_html_print_debug,
    \   'htmldjango':      g:my_html_print_debug,
    \ }
'''
