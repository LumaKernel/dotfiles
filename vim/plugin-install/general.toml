# プラグイン追加時のあれこれ
# 
# - ファイルタイプ専用のものであれば，専用TOMLファイルに追加
# - Lazy にする場合 (on_ft なども含まれる) は，
#   dein#check_lazy_plugins() でチェック
#   この設定は，基本いらないとすら思っていい


[[plugins]]
repo = 'Shougo/dein.vim'


[[plugins]]
repo = 'vim-jp/vimdoc-ja'


[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
	nmap gx <Plug>(openbrowser-smart-search)
	vmap gx <Plug>(openbrowser-smart-search)
'''


[[plugins]]
repo = 'jacoborus/tender.vim'
[[plugins]]
repo = 'cocopon/iceberg.vim'
[[plugins]]
repo = 'joshdick/onedark.vim'


[[plugins]]
repo = 'itchyny/vim-parenmatch'


[[plugins]]
repo = 'itchyny/vim-cursorword'
if = '!g:from_pwsh'


[[plugins]]
repo = 'tyru/caw.vim'



[[plugins]]
# TODO : denite.vim に乗り換える ?
repo = 'Shougo/unite.vim' # {{{
hook_add = '''
  let g:unite_enable_start_insert = 1
  augroup MyUnite
    au!
    autocmd Filetype unite imap <buffer><silent> <ESC> <ESC>q
    autocmd Filetype unite imap <buffer><silent> <C-J> <C-N>
    autocmd Filetype unite imap <buffer><silent> <C-K> <C-P>
  augroup END

''' # }}}


[[plugins]]
repo = 'airblade/vim-gitgutter'



# 考え中のプラグイン
# - パスをヤンク
# - 選んだパスをcheckout master -- 
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
  let g:fern#default_hidden = 1
  let g:fern#default_exclude = '^\(\.git\|\.DS_Store\)$'

  function! s:init_fern() abort
    nmap <buffer><expr><silent>
          \ B
          \ fern#smart#scheme(
          \   ":\<C-u>Fern bookmark:///\<CR>",
          \   {
          \     'bookmark': "B",
          \   },
          \ )
    silent! nunmap <buffer> t
  endfunction

  nnoremap <Leader>ai :<C-u>Fern . -reveal=%<CR>
  nnoremap <Leader>aa :<C-u>Fern . -drawer -reveal=%<CR>

  augroup my-fern
    autocmd! *
    autocmd FileType fern call s:init_fern()
  augroup END

  let g:loaded_netrw             = 1
  let g:loaded_netrwPlugin       = 1
  let g:loaded_netrwSettings     = 1
  let g:loaded_netrwFileHandlers = 1

  augroup my-fern-hijack
    autocmd!
    autocmd BufEnter * ++nested call s:hijack_directory()
  augroup END

  function! s:hijack_directory() abort
    let path = expand('%')
    if !isdirectory(path)
      return
    endif
    exe 'Fern' path
  endfunction

'''


[[plugins]]
repo = 'lambdalisue/fern-bookmark.vim'
depends = 'fern.vim'



[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1

  inoremap <silent><expr> <C-n>
    \ pumvisible() ? "\<C-n>" :
    \ deoplete#manual_complete(['lsp'])

  " inoremap <silent><expr> <TAB>
  "  \ pumvisible() ? "\<C-n>" :
  "  \ <SID>check_back_space() ? "\<TAB>" :
  "  \ deoplete#manual_complete()

  " function! s:check_back_space() abort
  "   let col = col('.') - 1
  "   return !col || getline('.')[col - 1]  =~ '\s'
  " endfunction

  call deoplete#custom#source('_',
        \ 'matchers', ['matcher_full_fuzzy'])

'''

[[plugins]]
repo = 'Shougo/neosnippet.vim' # {{{
hook_add = '''
  let g:neosnippet#snippets_directory = ['~/lib-cpp/', '~/dotfiles/vim/snippets/']

  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_or_target)
''' # }}}

[[plugins]]
repo = 'Shougo/neosnippet-snippets'


[[plugins]]
if = 'has("python3") && !has("nvim") && !has("win32unix")'
repo = 'roxma/nvim-yarp'


[[plugins]]
# NOTE : pip insetall --user pynvim
if = 'has("python3") && !has("nvim") && !has("win32unix")'
repo = 'roxma/vim-hug-neovim-rpc'


[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  " after で色々やられ，競合しやすいのでホワイトリストで管理
  let g:indentLine_fileType = [
      \   'c',
      \   'cmake',
      \   'coq',
      \   'cpp',
      \   'csharp',
      \   'css',
      \   'go',
      \   'haskell',
      \   'html',
      \   'javascript',
      \   'javascriptreact',
      \   'json',
      \   'jsonc',
      \   'latex',
      \   'less',
      \   'make',
      \   'ocaml',
      \   'perl',
      \   'php',
      \   'powershell',
      \   'pug',
      \   'python',
      \   'ruby',
      \   'rust',
      \   'scala',
      \   'scss',
      \   'sml',
      \   'toml',
      \   'typescript',
      \   'typescriptreact',
      \   'vim',
      \   'vue',
      \   'xml',
      \   'yaml',
      \   'yml',
      \ ]
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim' # {{{
hook_add = '''
  let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:20,results:50'
  let g:ctrlp_show_hidden = 1

  " ファイルのみ
  let g:ctrlp_types = ['fil']
  " ワーキングディレクトリ として pwd から上に上がって .git
  " があるディレクトリを探す
  let g:ctrlp_working_path_mode = 'w'
  let g:ctrlp_lazy_update = 200
  let g:ctrlp_custom_ignore = {
    \   'dir':  '\v([\/]\.(git|hg|svn)$|node_modules)',
    \   'file': '\v\.(exe|so|dll|o|vo|aux|glob)$',
    \   'link': '',
    \ }
  if executable('ag')
    " CtrlPのキャッシュを使わない
    let g:ctrlp_use_caching=0
    let g:ctrlp_user_command='ag %s -i --nogroup --nocolor -g ""'
  endif
''' # }}}

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
  nnoremap <Leader>cw :<C-u>ChooseWin<CR>
  nnoremap <Leader>cs :<C-u>ChooseWinSwap<CR>
'''


[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
merged = 0
hook_add = '''
  if has('win32')
    " Windows: preview は相性があまりよくない
    "   UTF-8 と CP932 を両方見れるようにするのがまず難しいそう
    let $FZF_DEFAULT_OPTS = ''
  else
    if executable('bat')
      let $FZF_DEFAULT_OPTS = '--tabstop=4 --reverse --preview "bat --pager=never --color=always --style=numbers --line-range :300 {}"'
    else
      let $FZF_DEFAULT_OPTS = '--tabstop=4 --reverse --preview "cat {}"'
    endif
  endif

  if executable('ag')
    let $FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'
  endif

  if has('nvim')
    let g:fzf_layout = { 'window': 'call my#CreateCenteredFloatingWindow()' }
  endif

  command! -bang Colors call fzf#vim#colors({'options': '--preview ""'}, <bang>0)

  command! -bang LS Buffers<bang>

  nnoremap <silent> ,f  :<C-u>Files<CR>
  nnoremap <silent> ,df :<C-u>GFiles<CR>
  nnoremap <silent> ,dd :<C-u>GFiles?<CR>
  nnoremap <silent><expr> ,cf ':<C-u>Files<CR>' .. expand('<cword>')
  nnoremap <silent><expr> ,cdf ':<C-u>GFiles<CR>' .. expand('<cword>')
  nnoremap <silent><expr> ,cdd ':<C-u>GFiles?<CR>' .. expand('<cword>')
  nnoremap <silent> <Leader>i :<C-u>History<CR>
  nnoremap <silent> <Leader>ls :<C-u>Buffers<CR>
  nnoremap <silent> <Leader>col :<C-u>Colors<CR>

  let g:mapping_descriptions += [[',f', ':Files']]
  let g:mapping_descriptions += [[',df', ':GFiles']]
  let g:mapping_descriptions += [[',dd', ':GFiles?']]
  let g:mapping_descriptions += [[',cf ,cdf ,cdd', 'cursor ver.']]
  let g:mapping_descriptions += [['<Leader>i', ':History']]
  let g:mapping_descriptions += [['<Leader>ls', ':Buffers']]
  let g:mapping_descriptions += [['<Leader>col', ':Colors']]

  let g:mapping_descriptions += [[':LS', ':Buffers']]

  let g:mapping_descriptions += [[':BLines', '']]
  let g:mapping_descriptions += [[':History', '']]
  let g:mapping_descriptions += [[':Marks', '']]
'''




[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config['_'] = {
      \   'outputter' : 'quickfix',
      \   'runner' : has('+job') ? 'job' : 'vimproc'
      \ }
  nnoremap <expr> <Leader>0 ":ccl\|QuickRun\<CR>"
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = 'w0rp/ale' # {{{
if = 0
hook_add = '''
  " エラー行に表示するマーク
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '>>'
  
  let g:ale_list_window_size = 1
  
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  let g:ale_sign_column_always = 1
  
  let g:ale_lint_on_enter = 1
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 'always'
  let g:ale_lint_on_filetype_changed = 1
  let g:ale_lint_on_insert_leave = 1
  
  let g:ale_set_loclist = 1
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0
  
  let g:ale_linters = get(g:, 'ale_linters', {})
  let g:ale_fixers = get(g:, 'ale_fixers', {})
  
  let g:ale_fixers['*'] = ['remove_trailing_lines', 'trim_whitespace']
  
  nmap <silent> <Leader>p <Plug>(ale_previous_wrap)
  nmap <silent> <Leader>n <Plug>(ale_next_wrap)
'''
# }}}


[[plugins]]
repo = 'unblevable/quick-scope'


[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
if = 0
hook_add='''
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
'''
hook_post_source='''
  " call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
  "    \ 'name': 'neosnippet',
  "    \ 'whitelist': ['*'],
  "    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
  "    \ }))
'''


[[plugins]]
repo = 'AndrewRadev/linediff.vim'
# Visual モードで :Linediff


# 微妙に動かない
# foldenable の時に
# TODO : Issue 出すかも
[[plugins]]
if = 'g:is_wsl'
repo = 'liuchengxu/vista.vim'
hook_add = '''
'''


[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'


[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_post_source = '''
  call gina#custom#command#option('/\(status\|commit\|log\|branch\|s\|lg\)', '--opener', 'vsplit')

  " -- status の設定
  call gina#custom#command#alias('status', 's')
  call gina#custom#command#option('s', '--short')

  call gina#custom#command#alias('log', 'lg')
  call gina#custom#command#option('lg', '--graph')

  nnoremap <silent> <Leader>st :Gina s<CR>
  nnoremap <silent> <Leader>cc :Gina compare<CR>
  nnoremap <silent> <Leader>com :Gina commit<CR>
  nnoremap <silent> <Leader>dd :Gina diff HEAD<CR>
  nnoremap <silent> <Leader>lg :Gina lg<CR>
  nnoremap <silent> <Leader>bla :Gina blame<CR>
'''

[[plugins]]
repo = 'kshenoy/vim-signature'


# TODO cmdwin があんま動かない，クォーテーションで変に?
[[plugins]]
repo = 'mhinz/vim-grepper'
hook_add = '''
  let g:grepper = {}
  let g:grepper.tools = ['git', 'ag']
  let g:grepper.prompt_mapping_tool = '<tab>'
  
  nmap gs <plug>(GrepperOperator)
  xmap gs <plug>(GrepperOperator)
  
  nnoremap <silent> ,g :Grepper<CR>
  nnoremap <silent> ,cg :Grepper -cword -noprompt<CR>
  
  let g:mapping_descriptions += [[',g', ':Grepper']]
  let g:mapping_descriptions += [[',cg', 'Grep word under the cursor.']]
  let g:mapping_descriptions += [['gs', 'Grep with operator.']]

  let g:grepper = { 'open': 0 }
  autocmd User Grepper Cedit
'''


[[plugins]]
repo = 'luochen1990/rainbow'


[[plugins]]
repo = 'haya14busa/vim-asterisk'
hook_add = '''
  let g:asterisk#keeppos = 1
  map *  <Plug>(asterisk-z*)
  map #  <Plug>(asterisk-z*)N
  map g* <Plug>(asterisk-gz*)
  map g# <Plug>(asterisk-gz*)N
  xmap *  <Plug>(asterisk-z*)
  xmap #  <Plug>(asterisk-z*)N
  xmap g* <Plug>(asterisk-gz*)
  xmap g# <Plug>(asterisk-gz*)N
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(LiveEasyAlign)
  nmap ga <Plug>(LiveEasyAlign)
'''

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'osyo-manga/ref-lynx'

[[plugins]]
repo = 'HiPhish/info.vim'

[[plugins]]
repo = 'pcostasgr/red_alert_vim_theme'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'mattn/vim-sonictemplate'

[[plugins]]
repo = 'Quramy/tsuquyomi'
hook_add = '''
  let g:tsuquyomi_disable_default_mappings = 1
  let g:tsuquyomi_disable_quickfix = 1
'''


