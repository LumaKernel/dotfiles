# プラグイン追加時のあれこれ
# 
# - ファイルタイプ専用のものであれば，専用TOMLファイルに追加
# - Lazy にする場合 (on_ft なども含まれる) は，
#   dein#check_lazy_plugins() でチェック
#   この設定は，基本いらないとすら思っていい


[[tplugins]]
repo = 'Shougo/dein.vim'


[[plugins]]
repo = 'vim-jp/vimdoc-ja'


[[plugins]]
repo = 'tyru/open-browser.vim'


[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'cocopon/iceberg.vim'


[[plugins]]
repo = 'itchyny/vim-parenmatch'


[[plugins]]
repo = 'itchyny/vim-cursorword'
if = '!g:from_pwsh'


[[plugins]]
repo = 'tyru/caw.vim'



[[plugins]]
# TODO : denite.vim に乗り換える ?
repo = 'Shougo/unite.vim' # {{{
hook_add = '''
  let g:unite_enable_start_insert = 1
  augroup MyUnite
    au!
    autocmd Filetype unite imap <buffer><silent> <ESC> <ESC>q
    autocmd Filetype unite imap <buffer><silent> <C-J> <C-N>
    autocmd Filetype unite imap <buffer><silent> <C-K> <C-P>
  augroup END

  nnoremap <silent> <Leader>b :Unite buffer<CR>
  nnoremap <unique><silent> <Leader>a :Unite outline<CR>

  " unite grep
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1

  nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
  " TODO うまくうごかない
  " nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
  nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>

  " use ripgrep
  if executable('rg')
    let g:unite_source_grep_command = 'rg'
    let g:unite_source_grep_default_opts = '--vimgrep'
    let g:unite_source_grep_recursive_opt = ''
  endif
''' # }}}


[[plugins]]
repo = 'airblade/vim-gitgutter'


# NERDTree
[[plugins]]
repo = 'scrooloose/nerdtree'
depends = ['vimproc.vim']
hook_add = '''
  let g:NERDTreeShowHidden=1
  
  " 最小限，とてもいい
  let g:NERDTreeDirArrowExpandable="\uf114"
  let g:NERDTreeDirArrowCollapsible="\uf115"
  let g:NERDTreeWinSize=24
  
  nnoremap <silent> <Leader>a :NERDTree<CR>
  let g:mapping_descriptions += [['<Leader>a', ':NERDTree']]

  augroup MyNerdTree
    au!
    au FileType nerdtree nmap <buffer> za o
    au FileType nerdtree nunmap <buffer> q
    au FileType nerdtree setlocal conceallevel=3
  augroup END

  let g:NERDTreeShowBookmarks = 1
'''


[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['nerdtree']


[[plugins]]
repo = 'Shougo/vimshell.vim'
depends = ['vimproc.vim']
hook_add = '''
  nnoremap <unique><silent> <Leader>h :VimShell<CR>

  let g:mapping_descriptions += [['<Leader>h', ':VimShell']]
'''


[[plugins]]
repo = 'Shougo/neosnippet.vim' # {{{
depends = ['neosnippet-snippets']
hook_add = '''
  let g:neosnippet#snippets_directory = ['~/lib-cpp/', '~/dotfiles/vim/snippets/']

  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_or_target)
''' # }}}


[[plugins]]
repo = 'Shougo/neosnippet-snippets'


[[plugins]]
if = 'has("python3") && !has("nvim") && !has("win32unix")'
repo = 'roxma/nvim-yarp'


[[plugins]]
# NOTE : pip insetall --user pynvim
if = 'has("python3") && !has("nvim") && !has("win32unix")'
repo = 'roxma/vim-hug-neovim-rpc'


[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_setConceal = 0
'''


[[plugins]]
repo = 'ctrlpvim/ctrlp.vim' # {{{
hook_add = '''
  let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:20,results:50'
  let g:ctrlp_show_hidden = 1

  " ファイルのみ
  let g:ctrlp_types = ['fil']
  " ワーキングディレクトリ として pwd から上に上がって .git
  " があるディレクトリを探す
  let g:ctrlp_working_path_mode = 'w'
  let g:ctrlp_lazy_update = 200
  let g:ctrlp_custom_ignore = {
    \   'dir':  '\v([\/]\.(git|hg|svn)$|node_modules)',
    \   'file': '\v\.(exe|so|dll|o|vo|aux|glob)$',
    \   'link': '',
    \ }
  if executable('ag')
    " CtrlPのキャッシュを使わない
    let g:ctrlp_use_caching=0
    let g:ctrlp_user_command='ag %s -i --nogroup --nocolor -g ""'
  endif
''' # }}}


[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
merged = 0
hook_add = '''
  if has('win32')
    " WIndows: preview は相性があまりよくない
    let $FZF_DEFAULT_OPTS = ''
  else
    if $FZF_DEFAULT_OPTS ==# ''
      if executable('bat')
        let $FZF_DEFAULT_OPTS = '--tabstop=4 --preview "bat --pager=never --color=always --style=numbers --line-range :300 {}"'
      else
        let $FZF_DEFAULT_OPTS = '--tabstop=4 --preview "cat {}"'
      endif
    endif
  endif

  command! -bang Colors call fzf#vim#colors({'options': '--preview ""'}, <bang>0)

  command! -bang LS Buffers<bang>

  nnoremap <unique><silent> <Leader>p :Files<CR>
  nnoremap <unique><silent> <Leader>gf :GFiles<CR>
  nnoremap <unique><silent> <Leader>gg :GFiles?<CR>
  nnoremap <unique><silent> <Leader>buf :Buffers<CR>
  nnoremap <unique><silent> <Leader>col :Colors<CR>

  let g:mapping_descriptions += [['<Leader>p', ':Files']]
  let g:mapping_descriptions += [['<Leader>gf', ':GFiles']]
  let g:mapping_descriptions += [['<Leader>gg', ':GFiles?']]
  let g:mapping_descriptions += [['<Leader>buf', ':Buffers']]
  let g:mapping_descriptions += [['<Leader>col', ':Colors']]

  let g:mapping_descriptions += [[':LS', ':Buffers']]

  let g:mapping_descriptions += [[':BLines', '']]
  let g:mapping_descriptions += [[':History', '']]
  let g:mapping_descriptions += [[':Marks', '']]
'''




[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config['_'] = {
      \   'outputter' : 'quickfix',
      \   'runner' : 'job'
      \ }
  nnoremap <expr> <Leader>0 ":ccl\|QuickRun\<CR>"
'''

[[plugins]]
repo = 'w0rp/ale' # {{{
if = 0
hook_add = '''
  " エラー行に表示するマーク
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '>>'
  
  let g:ale_list_window_size = 1
  
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  let g:ale_sign_column_always = 1
  
  let g:ale_lint_on_enter = 1
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 'always'
  let g:ale_lint_on_filetype_changed = 1
  let g:ale_lint_on_insert_leave = 1
  
  let g:ale_set_loclist = 1
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0
  
  let g:ale_linters = get(g:, 'ale_linters', {})
  let g:ale_fixers = get(g:, 'ale_fixers', {})
  
  let g:ale_fixers['*'] = ['remove_trailing_lines', 'trim_whitespace']
  
  nmap <unique><silent> <Leader>p <Plug>(ale_previous_wrap)
  nmap <unique><silent> <Leader>n <Plug>(ale_next_wrap)
'''
# }}}


[[plugins]]
repo = 'unblevable/quick-scope'


[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
hook_add='''
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
'''
hook_source='''
  " call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
  "    \ 'name': 'neosnippet',
  "    \ 'whitelist': ['*'],
  "    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
  "    \ }))
'''


[[plugins]]
repo = 'AndrewRadev/linediff.vim'
# Visual モードで :Linediff


# 微妙に動かない
# foldenable の時に
# TODO : Issue 出すかも
[[plugins]]
if = '0'
repo = 'liuchengxu/vista.vim'
hook_add = '''
  " let $FZF_DEFAULT_OPTS = '--layout=reverse'

  let g:fzf_layout = { 'window': 'call OpenFloatingWin()' }

  function! OpenFloatingWin()
    let height = &lines - 3
    let width = float2nr(&columns - (&columns * 2 / 10))
    let col = float2nr((&columns - width) / 2)

    let opts = {
          \ 'relative': 'editor',
          \ 'row': height * 0.3,
          \ 'col': col + 30,
          \ 'width': width * 2 / 3,
          \ 'height': height / 2
          \ }

    let buf = nvim_create_buf(v:false, v:true)
    let win = nvim_open_win(buf, v:true, opts)
  endfunction
'''


[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'


[[plugins]]
repo = 'tpope/vim-fugitive'


[[plugins]]
repo = 'luochen1990/rainbow'


[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = """
  xmap ga <Plug>(LiveEasyAlign)
  nmap ga <Plug>(LiveEasyAlign)
"""

