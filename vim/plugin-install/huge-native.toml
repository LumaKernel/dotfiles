# Color Schemes
[[plugins]]
repo = 'NLKNguyen/papercolor-theme'
[[plugins]]
repo = 'jacoborus/tender.vim'
[[plugins]]
repo = 'cocopon/iceberg.vim'
[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = 'let g:switch_color_scheme_default = "onedark"'
[[plugins]]
repo = 'rhysd/vim-color-spring-night'
[[plugins]]
repo = 'dracula/vim'
name = 'colorscheme-dracula-vim'
[[plugins]]
repo = 'jpo/vim-railscasts-theme'
[[plugins]]
repo = 'junegunn/seoul256.vim'
[[plugins]]
repo = 'fcpg/vim-orbital'
[[plugins]]
repo = 'drewtempelmeyer/palenight.vim'
[[plugins]]
repo = 'AlessandroYorba/Sierra'
[[plugins]]
repo = 'cormacrelf/vim-colors-github'
[[plugins]]
repo = 'bluz71/vim-nightfly-guicolors'
[[plugins]]
repo = 'mhartington/oceanic-next'
[[plugins]]
repo = 'glepnir/zephyr-nvim'
[[plugins]]
if = 'has("nvim")'
repo = 'tjdevries/colorbuddy.vim'
[[plugins]]
repo = 'sainnhe/edge'

# Vim Doc
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# Fuzzy Finder
[[plugins]]
repo = 'junegunn/fzf'
merged = 0
build = './install --all'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config['_'] = {
    \   'outputter' : 'quickfix',
    \   'runner' : has('+job') ? 'job' : 'vimproc'
    \ }

let g:quickrun_config.cpp_cp = {
    \   'exec': 'make run_%S:t:r',
    \   'hook/shebang/enable': 0,
    \   'runner/vimproc/updatetime': 50,
    \ }

let s:base_rust_cp =
    \       'export RUSTFLAGS=-Awarnings' .. " ; " ..
    \       'rustup run 1.42.0 --install cargo build --bin %S:t:r --target-dir cp.target --quiet' .. " ; " ..
    \       'time rustup run 1.42.0 cargo run %o --bin %S:t:r --target-dir cp.target --quiet' .. " ; "
let g:quickrun_config.rust_cp = {
    \   'exec': 'bash -ec ' .. "'" .. s:base_rust_cp .. "'",
    \   'hook/shebang/enable': 0,
    \   'runner/vimproc/updatetime': 50,
    \ }
let g:quickrun_config.rust_cp_v = {
    \   'exec': 'bash -ec ' .. "'" ..
    \       'export RUST_BACKTRACE=1' .. " ; " ..
    \       s:base_rust_cp ..
    \       "'",
    \   'hook/shebang/enable': 0,
    \   'runner/vimproc/updatetime': 50,
    \ }
nnoremap <expr> <Leader>0 ":ccl\|QuickRun\<CR>"
" nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

# Git Utility
[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_post_source = '''
" -- status の設定
call gina#custom#command#alias('status', 's')
call gina#custom#command#option('s', '--short')

call gina#custom#command#alias('log', 'lg')
call gina#custom#command#option('lg', '--graph')

nnoremap <silent> <SPACE>st :<C-u>Gina s<CR>
nnoremap <silent> <SPACE>cc :<C-u>Gina compare<CR>
nnoremap <silent> <SPACE>gc :<C-u>tabnew \| Gina commit<CR>:split \| Gina diff --cached<CR>:wincmd w<CR>
nnoremap <silent> <SPACE>dd :<C-u>Gina diff HEAD<CR>
nnoremap <silent> <SPACE>bla :<C-u>Gina blame<CR>

function! s:Browse(line1, line2) abort
  let save = @@
  let @@ = ''
  if filereadable(expand('%'))
    execute printf('%d,%dGina browse --yank :', a:line1, a:line2)
  else
    Gina browse --yank
  endif
  if !empty(@@)
    execute "OpenBrowser" @@
  endif
  let @@ = save
endfunction

command! -range Browse call <SID>Browse(<line1>, <line2>)
command! -range GitHubBrowse call <SID>Borwse(<line1>, <line2>)
nnoremap <silent> <Leader>bro :Browse<CR>
xnoremap <silent> <Leader>bro :Browse<CR>
'''

[[plugins]]
repo = 'LumaKernel/vim-messages-qf'
if = 0
merged = 0
hook_add = '''
command! -bar MessagesQF call g:messages_qf#messages() | Cedit
'''

[[plugins]]
repo = 'kana/vim-altr'
# call altr#define('src/%.css', 'dist/%.css')
hook_add = '''
nmap <SPACE>ap <Plug>(altr-back)
nmap <SPACE>an <Plug>(altr-forward)
'''

[[plugins]]
repo = 'Quramy/tsuquyomi'
if = "g:ts_lsp_mode is# 'tsu'"
hook_add = '''
let g:tsuquyomi_disable_quickfix = 1
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_setConceal = 0
'''

[[plugins]]
repo = 'github/copilot.vim'
if = 'has("nvim")'
hook_add = '''
let g:copilot_no_maps = 1
imap <Plug>(copilot-dismiss)  <Cmd>call copilot#Dismiss()<CR>
imap <Plug>(copilot-next)     <Cmd>call copilot#Next()<CR>
imap <Plug>(copilot-previous) <Cmd>call copilot#Previous()<CR>
imap <Plug>(copilot-suggest)  <Cmd>call copilot#Suggest()<CR>
imap <script><silent><nowait><expr> <Plug>(copilot-accept-word) copilot#AcceptWord()
imap <script><silent><nowait><expr> <Plug>(copilot-accept-line) copilot#AcceptLine()

function! s:copilot_is_suggesting() abort
    if exists('b:_copilot.first')
      return v:true
    endif
    if exists('b:_copilot.cycling')
      return v:true
    endif
    return v:false
endfunction

function! s:luma_copilot_suggest() abort
  if s:copilot_is_suggesting()
    return copilot#AcceptWord()
  else
    call copilot#Suggest()
    return ''
  endif
endfunction

function! s:luma_copilot_accept_line() abort
  if s:copilot_is_suggesting()
    return copilot#AcceptLine()
  else
    return "\<C-l>"
  endif
endfunction

function! s:luma_copilot_accept() abort
  if s:copilot_is_suggesting()
    return copilot#Accept()
  else
    return "\<C-i>"
  endif
endfunction

imap <script><silent><nowait><expr> <Plug>(luma-copilot-suggest) <SID>luma_copilot_suggest()
imap <script><silent><nowait><expr> <Plug>(luma-copilot-accept) <SID>luma_copilot_accept()
imap <script><silent><nowait><expr> <Plug>(luma-copilot-accept-line) <SID>luma_copilot_accept_line()
imap <C-f> <Plug>(luma-copilot-suggest)
imap <M-]> <Plug>(copilot-next)
imap <M-[> <Plug>(copilot-previous)
imap <C-i> <Plug>(luma-copilot-accept)
imap <C-l> <Plug>(luma-copilot-accept-line)

augroup my-copilot
  autocmd!
  autocmd BufEnter * Copilot disable
augroup END
'''
