# Color Schemes
[[plugins]]
repo = 'NLKNguyen/papercolor-theme'
[[plugins]]
repo = 'jacoborus/tender.vim'
[[plugins]]
repo = 'cocopon/iceberg.vim'
[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = 'let g:switch_color_scheme_default = "onedark"'
[[plugins]]
repo = 'rhysd/vim-color-spring-night'
[[plugins]]
repo = 'dracula/vim'
name = 'colorscheme-dracula-vim'
[[plugins]]
repo = 'jpo/vim-railscasts-theme'
[[plugins]]
repo = 'junegunn/seoul256.vim'
[[plugins]]
repo = 'fcpg/vim-orbital'
[[plugins]]
repo = 'drewtempelmeyer/palenight.vim'
[[plugins]]
repo = 'AlessandroYorba/Sierra'
[[plugins]]
repo = 'cormacrelf/vim-colors-github'
[[plugins]]
repo = 'bluz71/vim-nightfly-guicolors'
[[plugins]]
repo = 'mhartington/oceanic-next'
[[plugins]]
repo = 'glepnir/zephyr-nvim'
[[plugins]]
if = 'has("nvim")'
repo = 'tjdevries/colorbuddy.vim'
[[plugins]]
repo = 'sainnhe/edge'

# Vim Doc
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'tyru/caw.vim'

# Snippet
[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
let g:neosnippet#snippets_directory = expand('~/dotfiles/vim/snippets')
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
# [[plugins]]
# repo = 'Shougo/deoppet.nvim'
# if = 'has("nvim")'
# hook_post_source = '''
# call deoppet#initialize()
# call deoppet#custom#option(
#   \   'snippets',
#   \   [{'path':expand('~/dotfiles/vim/snippets/')}],
#   \ )
# 
# imap <expr><C-k>
#   \ deoppet#expandable()
#   \ ? "\<Plug>(deoppet_expand)"
#   \ : "\<Plug>(deoppet_jump_backward)"
# imap <C-b> <Plug>(deoppet_jump_backward)
# smap <C-k> <Plug>(deoppet_jump_forward)
# smap <C-b> <Plug>(deoppet_jump_backward)
# 
# function! EditSnippet() abort
#   let snip_path = expand(printf('~/dotfiles/vim/snippets/%s.snip', &l:filetype))
#   execute 'edit' fnameescape(snip_path)
# endfunction
# 
# command! -bar EditSnippet call EditSnippet()
# '''

# Fuzzy Finder
[[plugins]]
repo = 'junegunn/fzf'
merged = 0
build = './install --all'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config['_'] = {
    \   'outputter' : 'quickfix',
    \   'runner' : has('+job') ? 'job' : 'vimproc'
    \ }
nnoremap <expr> <Leader>0 ":ccl\|QuickRun\<CR>"
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# Git Utility
[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_post_source = '''
" -- status の設定
call gina#custom#command#alias('status', 's')
call gina#custom#command#option('s', '--short')

call gina#custom#command#alias('log', 'lg')
call gina#custom#command#option('lg', '--graph')

nnoremap <silent> <Leader>st :<C-u>Gina s<CR>
nnoremap <silent> <Leader>cc :<C-u>Gina compare<CR>
nnoremap <silent> <Leader>com :<C-u>tabnew \| Gina commit<CR>:split \| Gina diff --cached<CR>:wincmd w<CR>
nnoremap <silent> <Leader>dd :<C-u>Gina diff HEAD<CR>
nnoremap <silent> <Leader>lg :<C-u>Gina lg<CR>
nnoremap <silent> <Leader>bla :<C-u>Gina blame<CR>

function! s:Browse(line1, line2) abort
  let save = @@
  let @@ = ''
  if filereadable(expand('%'))
    execute printf('%d,%dGina browse --yank :', a:line1, a:line2)
  else
    Gina browse --yank
  endif
  if !empty(@@)
    execute "OpenBrowser" @@
  endif
  let @@ = save
endfunction

command! -range Browse call <SID>Browse(<line1>, <line2>)
command! -range GitHubBrowse call <SID>Borwse(<line1>, <line2>)
nnoremap <silent> <Leader>bro :Browse<CR>
xnoremap <silent> <Leader>bro :Browse<CR>
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'machakann/vim-sandwich'
# [s]urround ([a]dd/[d]elete/[r]ename)
# [i]nner [b]races
# [a] [b]raced text

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
# [x, ]x : jumps

[[plugins]]
repo = 'LumaKernel/vim-messages-qf'
if = 0
merged = 0
hook_add = '''
command! -bar MessagesQF call g:messages_qf#messages() | Cedit
'''

[[plugins]]
repo = 'kana/vim-altr'
# call altr#define('src/%.css', 'dist/%.css')
hook_add = '''
nmap <SPACE>ap <Plug>(altr-back)
nmap <SPACE>an <Plug>(altr-forward)
'''

[[plugins]]
repo = 'thinca/vim-localrc'
hook_add = '''
let g:localrc_filename = 'local_init.vim'
'''

[[plugins]]
repo = 'lambdalisue/vim-findent'
hook_add = '''
silent! EditorConfigDisable

function! s:my_findent_init() abort
  if &buftype is# 'help'
    return
  endif
  let no_check = [
    \   'javascript',
    \   'typescript',
    \   'typescriptreact',
    \   'help',
    \ ]
  if index(no_check, &l:ft) < 0
    Findent --no-messages --no-warnings --chunksize=300
    call timer_start(0, {-> execute("silent! EditorConfigReload")})
  endif
endfunction

augroup findent
  autocmd!
  autocmd BufNewFile,BufReadPost,BufFilePost ++nested * call s:my_findent_init()
augroup END
'''

[[plugins]]
repo = 'sentriz/vim-print-debug'
hook_add = '''
function! s:my_print_debug() abort
  if exists('t:print_debug_current_nr')
    if t:print_debug_current_nr >= 96 + 26
      let t:print_debug_current_nr = 96
    endif
  endif
  if !&modifiable
    echohl WarningMsg
    echomsg "[my print debug] not modifiable..."
    echohl None
    return
  endif
  call print_debug#print_debug()
endfunction

nnoremap <Space>p :<C-u>call <SID>my_print_debug()<CR>

" let g:my_debug_style = [
"   \   'color:red',
"   \   'background:black',
"   \   'display:inline-block',
"   \   'padding:0.2em',
"   \   'font-size:1em',
"   \ ]
" call map(g:my_debug_style, {_, v -> printf("%s !important;", v)})
" let g:my_debug_style = join(g:my_debug_style, '')

" let g:my_html_print_debug = printf('<span style="%s">_x_[XXX]_x_: {}</span>', g:my_debug_style)

let g:print_debug_templates = {
  \   'go':              'fmt.Printf("_x_[XXX]_x_ {}\n")',
  \   'python':          'logging.error(f"_x_[XXX]_x_ {}")',
  \   'javascript':      'console.log(`_x_[XXX]_x_ {}`);',
  \   'javascriptreact': 'console.log(`_x_[XXX]_x_ {}`);',
  \   'typescript':      'console.log(`_x_[XXX]_x_ {}`);',
  \   'typescriptreact': 'console.log(`_x_[XXX]_x_ {}`);',
  \   'vue':             'console.log(`_x_[XXX]_x_ {}`);',
  \   'svelte':          'console.log(`_x_[XXX]_x_ {}`);',
  \   'c':               'printf(_x_[XXX]_x_ {}\n");',
  \   'cpp':             'std::cout << ("_x_[XXX]_x_ {}\n") << std::endl;',
  \   'rust':            'println!("_x_[XXX]_x_ {}");',
  \ }
'''


[[plugins]]
repo = 'Quramy/tsuquyomi'
if = "g:ts_lsp_mode is# 'tsu'"
hook_add = '''
let g:tsuquyomi_disable_quickfix = 1
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_setConceal = 0
'''

[[plugins]]
repo = 'vim-denops/denops.vim'
# let g:denops#debug = 1
