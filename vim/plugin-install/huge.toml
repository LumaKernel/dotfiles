[[plugins]]
repo = 'tyru/caw.vim'

# Snippet
[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
let g:neosnippet#snippets_directory = [
  \   expand('~/dotfiles/vim/snippets'),
  \ ]
  " TODO:
  " \   expand('~/ghq/github.com/LumaKernel/lib-cpp'),
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
# [[plugins]]
# repo = 'Shougo/deoppet.nvim'
# if = 'has("nvim")'
# hook_post_source = '''
# call deoppet#initialize()
# call deoppet#custom#option(
#   \   'snippets',
#   \   [{'path':expand('~/dotfiles/vim/snippets/')}],
#   \ )
# 
# imap <expr><C-k>
#   \ deoppet#expandable()
#   \ ? "\<Plug>(deoppet_expand)"
#   \ : "\<Plug>(deoppet_jump_backward)"
# imap <C-b> <Plug>(deoppet_jump_backward)
# smap <C-k> <Plug>(deoppet_jump_forward)
# smap <C-b> <Plug>(deoppet_jump_backward)
# 
# function! EditSnippet() abort
#   let snip_path = expand(printf('~/dotfiles/vim/snippets/%s.snip', &l:filetype))
#   execute 'edit' fnameescape(snip_path)
# endfunction
# 
# command! -bar EditSnippet call EditSnippet()
# '''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'machakann/vim-sandwich'
# [s]urround ([a]dd/[d]elete/[r]ename)
# [i]nner [b]races
# [a] [b]raced text

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
# [x, ]x : jumps

[[plugins]]
repo = 'thinca/vim-localrc'
hook_add = '''
let g:localrc_filename = 'local_init.vim'
'''

[[plugins]]
repo = 'lambdalisue/vim-findent'
hook_add = '''
silent! EditorConfigDisable

function! s:my_findent_init() abort
  if &buftype is# 'help'
    return
  endif
  let no_check = [
    \   'javascript',
    \   'typescript',
    \   'typescriptreact',
    \   'help',
    \ ]
  if index(no_check, &l:ft) < 0
    Findent --no-messages --no-warnings --chunksize=300
    call timer_start(0, {-> execute("silent! EditorConfigReload")})
  endif
endfunction

augroup findent
  autocmd!
  autocmd BufNewFile,BufReadPost,BufFilePost ++nested * call s:my_findent_init()
augroup END
'''

[[plugins]]
repo = 'sentriz/vim-print-debug'
hook_add = '''
function! s:my_print_debug() abort
  if exists('t:print_debug_current_nr')
    if t:print_debug_current_nr >= 96 + 26
      let t:print_debug_current_nr = 96
    endif
  endif
  if !&modifiable
    echohl WarningMsg
    echomsg "[my print debug] not modifiable..."
    echohl None
    return
  endif
  call print_debug#print_debug()
endfunction

nnoremap <Space>p :<C-u>call <SID>my_print_debug()<CR>

" let g:my_debug_style = [
"   \   'color:red',
"   \   'background:black',
"   \   'display:inline-block',
"   \   'padding:0.2em',
"   \   'font-size:1em',
"   \ ]
" call map(g:my_debug_style, {_, v -> printf("%s !important;", v)})
" let g:my_debug_style = join(g:my_debug_style, '')

" let g:my_html_print_debug = printf('<span style="%s">_x_[XXX]_x_: {}</span>', g:my_debug_style)

let g:print_debug_templates = {
  \   'go':              'fmt.Printf("_x_[XXX]_x_ {}\n")',
  \   'python':          'logging.error(f"_x_[XXX]_x_ {}")',
  \   'javascript':      'console.log(`_x_[XXX]_x_ {}`);',
  \   'javascriptreact': 'console.log(`_x_[XXX]_x_ {}`);',
  \   'typescript':      'console.log(`_x_[XXX]_x_ {}`);',
  \   'typescriptreact': 'console.log(`_x_[XXX]_x_ {}`);',
  \   'vue':             'console.log(`_x_[XXX]_x_ {}`);',
  \   'svelte':          'console.log(`_x_[XXX]_x_ {}`);',
  \   'c':               'printf(_x_[XXX]_x_ {}\n");',
  \   'cpp':             'std::cout << ("_x_[XXX]_x_ {}\n") << std::endl;',
  \   'rust':            'println!("_x_[XXX]_x_ {}");',
  \ }
'''


[[plugins]]
repo = 'vim-denops/denops.vim'
# let g:denops#debug = 1

[[plugins]]
repo = 'LumaKernel/quick-tex.vim'
depends = ['denops.vim']
hook_add = '''
function! s:setup_quick_tex_init_text()
  call denops#notify("quick-tex", "recipe:semisemi", [])
endfunction
function! s:setup_quick_tex_init_lean()
  call denops#notify("quick-tex", "recipe:space", [])
  call denops#notify("quick-tex", "recipe:semisemi", [])
endfunction

function! s:setup_quick_tex_init()
  augroup quick-tex-init
    au!
    au FileType text call <SID>setup_quick_tex_init_text()
    au FileType lean,coq call <SID>setup_quick_tex_init_lean()
  augroup END

  if &filetype ==# 'text'
    call <SID>setup_quick_tex_init_text()
  elseif &filetype ==# 'lean' || &filetype ==# 'coq'
    call <SID>setup_quick_tex_init_lean()
  endif
endfunction

augroup quick-tex-init-setup
  au!
  au User DenopsPluginPost:quick-tex call <SID>setup_quick_tex_init()
augroup END
'''

# [[plugins]]
# repo = '~/projs/jupyter.vim'
# depends = ['denops.vim']
