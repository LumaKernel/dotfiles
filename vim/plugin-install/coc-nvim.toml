[[plugins]]
repo = 'neoclide/coc.nvim'
if = 'has("python3")'
rev = 'release'
hook_add = '''
  function! s:check_back_space() abort
    let col = col('.') - 1
    return col < 1 || getline('.')[col - 1] =~# '\s'
  endfunction

  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()

  inoremap <silent><expr> <S-TAB>
        \ pumvisible() ? "\<C-p>" :
        \ "\<S-TAB>"

  let g:coc_snippet_next = '<tab>'

  inoremap <silent><expr> <C-SPACE>
        \ coc#refresh()

  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gu <Plug>(coc-declaration)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  nmap <silent> gn <Plug>(coc-rename)

  nmap <silent> <F8> <Plug>(coc-format)
  vmap <silent> <F8> <Plug>(coc-format-selected)
  nmap <silent> <F9> <Plug>(coc-fix-current)

  nmap <silent> go <Plug>(coc-openlink)

  nmap <silent> <Leader>ld :<C-u>CocList diagnostics<CR>
  nmap <silent> <Leader>le :<C-u>CocList extensions<CR>
  nmap <silent> <Leader>lc :<C-u>CocList commands<CR>
  nmap <silent> <Leader>lo :<C-u>CocList outline<CR>
  nmap <silent> <Leader>ls :<C-u>CocList -I symbols<CR>
  nmap <silent> <Leader>ll :<C-u>CocListResume<CR>

  function! CocNvimHiDef()
    hi CocUnderline    cterm=underline   gui=underline
    hi CocErrorSign    ctermfg=Red       guifg=#ff0000
    hi CocWarningSign  ctermfg=Brown     guifg=#ff922b
    hi CocInfoSign     ctermfg=LightBlue guifg=#8888FF
    hi CocHintSign     ctermfg=Blue      guifg=#15aabf
    hi CocSelectedText ctermfg=Red       guifg=#fb4934
    hi CocCodeLens     ctermfg=Gray      guifg=#999999
    hi link cocerrorfloat       CocFloating
    hi link cocwarningfloat     CocFloating
    hi link cocinfofloat        CocFloating
    hi link cochintfloat        CocFloating
    hi link CocErrorHighlight   Error
    hi link CocWarningHighlight Warning
    hi link CocInfoHighlight    Info
    hi link CocHintHighlight    CocUnderline
    hi link CocListMode         ModeMsg
    hi link CocListPath         Comment
    hi link CocHighlightText    CursorColumn

    if has('nvim')
      hi link CocFloating NormalFloat
    else
      hi link CocFloating Pmenu
    endif

    hi link CocHoverRange     Search
    hi link CocCursorRange    Search
    hi link CocHighlightRead  CocHighlightText
    hi link CocHighlightWrite CocHighlightText
  endfunction

  nnoremap <silent> K :call <SID>show_documentation()<CR>
  
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h ' .. expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction
'''

hook_post_source = '''
  call CocNvimHiDef()
  au init_vim Syntax call CocNvimHiDef()
'''



[[plugins]]
repo = 'neoclide/coc-snippets'
depends = 'coc.nvim'

